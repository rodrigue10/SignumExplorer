// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignumExplorer.Context;

#nullable disable

namespace SignumExplorer.Migrations
{
    [DbContext(typeof(signumContext))]
    [Migration("20221110023951_AddViews_Indexes")]
    partial class AddViews_Indexes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("SignumExplorer.Models.Account", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("balance");

                    b.Property<int>("CreationHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("creation_height");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("ForgedBalance")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("forged_balance");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<int?>("KeyHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("key_height");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<byte[]>("PublicKey")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("public_key");

                    b.Property<long>("UnconfirmedBalance")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("unconfirmed_balance");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id", "Balance", "Height" }, "account_id_balance_height_idx");

                    b.HasIndex(new[] { "Id", "Height" }, "account_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "Id", "Latest" }, "account_id_latest_idx");

                    b.ToTable("account", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.AccountAsset", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.Property<long>("UnconfirmedQuantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("unconfirmed_quantity");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId", "AssetId", "Height" }, "account_asset_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "Quantity" }, "account_asset_quantity_idx");

                    b.ToTable("account_asset", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.AccountAssetAssetDetail", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssetName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("asset_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long?>("AssetQuantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_quantity");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<sbyte?>("Decimals")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("decimals");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.Property<long>("UnconfirmedQuantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("unconfirmed_quantity");

                    b.ToView("account_asset_asset_details");
                });

            modelBuilder.Entity("SignumExplorer.Models.Alias", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("alias_name");

                    b.Property<string>("AliasNameLower")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("alias_name_lower");

                    b.Property<string>("AliasUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias_uri");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId", "Height" }, "alias_account_id_idx");

                    b.HasIndex(new[] { "Id", "Height" }, "alias_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "AliasNameLower" }, "alias_name_lower_idx");

                    b.ToTable("alias", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.AliasOffer", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long?>("BuyerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("buyer_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id", "Height" }, "alias_offer_id_height_idx")
                        .IsUnique();

                    b.ToTable("alias_offer", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.AskOrder", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<int>("CreationHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("creation_height");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId", "Height" }, "ask_order_account_id_idx");

                    b.HasIndex(new[] { "AssetId", "Price" }, "ask_order_asset_id_price_idx");

                    b.HasIndex(new[] { "CreationHeight" }, "ask_order_creation_idx");

                    b.HasIndex(new[] { "Id", "Height" }, "ask_order_id_height_idx")
                        .IsUnique();

                    b.ToTable("ask_order", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.Asset", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<sbyte>("Decimals")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("decimals");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("name");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "asset_account_id_idx");

                    b.HasIndex(new[] { "Height" }, "asset_height");

                    b.HasIndex(new[] { "Id" }, "asset_id_idx")
                        .IsUnique();

                    b.ToTable("asset", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.AssetTransfer", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recipient_id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("sender_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AssetId", "Height" }, "asset_transfer_asset_id_idx");

                    b.HasIndex(new[] { "Id" }, "asset_transfer_id_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "RecipientId", "Height" }, "asset_transfer_recipient_id_idx");

                    b.HasIndex(new[] { "SenderId", "Height" }, "asset_transfer_sender_id_idx");

                    b.ToTable("asset_transfer", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.AssetTransferAssetDetail", b =>
                {
                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssetName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("asset_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long?>("AssetQuantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_quantity");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<sbyte?>("Decimals")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("decimals");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recipient_id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("sender_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.ToView("asset_transfer_asset_detail");
                });

            modelBuilder.Entity("SignumExplorer.Models.At", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<byte[]>("ApCode")
                        .HasColumnType("blob")
                        .HasColumnName("ap_code");

                    b.Property<long?>("ApCodeHashId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("ap_code_hash_id");

                    b.Property<int>("CCallStackBytes")
                        .HasColumnType("int(11)")
                        .HasColumnName("c_call_stack_bytes");

                    b.Property<int>("CUserStackBytes")
                        .HasColumnType("int(11)")
                        .HasColumnName("c_user_stack_bytes");

                    b.Property<int>("CreationHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("creation_height");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("creator_id");

                    b.Property<int>("Csize")
                        .HasColumnType("int(11)")
                        .HasColumnName("csize");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Dsize")
                        .HasColumnType("int(11)")
                        .HasColumnName("dsize");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<short>("Version")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("version");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ApCodeHashId" }, "at_ap_code_hash_id_index");

                    b.HasIndex(new[] { "CreatorId", "Height" }, "at_creator_id_height_idx");

                    b.HasIndex(new[] { "Id", "Height" }, "at_id_height_idx")
                        .IsUnique();

                    b.ToTable("at", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.AtState", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AtId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("at_id");

                    b.Property<bool>("FreezeWhenSameBalance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("freeze_when_same_balance");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("MinActivateAmount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("min_activate_amount");

                    b.Property<int>("NextHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("next_height");

                    b.Property<long>("PrevBalance")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("prev_balance");

                    b.Property<int>("PrevHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("prev_height");

                    b.Property<int>("SleepBetween")
                        .HasColumnType("int(11)")
                        .HasColumnName("sleep_between");

                    b.Property<byte[]>("State")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("state");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AtId", "Height" }, "at_state_at_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "AtId", "NextHeight", "Height" }, "at_state_id_next_height_height_idx");

                    b.ToTable("at_state", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.AtsView", b =>
                {
                    b.Property<byte[]>("ApCode")
                        .HasColumnType("blob")
                        .HasColumnName("ap_code");

                    b.Property<long?>("ApCodeHashId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("ap_code_hash_id");

                    b.Property<int>("CCallStackBytes")
                        .HasColumnType("int(11)")
                        .HasColumnName("c_call_stack_bytes");

                    b.Property<int>("CUserStackBytes")
                        .HasColumnType("int(11)")
                        .HasColumnName("c_user_stack_bytes");

                    b.Property<int>("CreationHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("creation_height");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("creator_id");

                    b.Property<int>("Csize")
                        .HasColumnType("int(11)")
                        .HasColumnName("csize");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int>("Dsize")
                        .HasColumnType("int(11)")
                        .HasColumnName("dsize");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<short>("Version")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("version");

                    b.ToView("ats_view");
                });

            modelBuilder.Entity("SignumExplorer.Models.BidOrder", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<int>("CreationHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("creation_height");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId", "Height" }, "bid_order_account_id_idx");

                    b.HasIndex(new[] { "AssetId", "Price" }, "bid_order_asset_id_price_idx");

                    b.HasIndex(new[] { "CreationHeight" }, "bid_order_creation_idx");

                    b.HasIndex(new[] { "Id", "Height" }, "bid_order_id_height_idx")
                        .IsUnique();

                    b.ToTable("bid_order", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.Block", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<byte[]>("Ats")
                        .HasColumnType("blob")
                        .HasColumnName("ats");

                    b.Property<long>("BaseTarget")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("base_target");

                    b.Property<byte[]>("BlockSignature")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)")
                        .HasColumnName("block_signature");

                    b.Property<byte[]>("CumulativeDifficulty")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("cumulative_difficulty");

                    b.Property<byte[]>("GenerationSignature")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)")
                        .HasColumnName("generation_signature");

                    b.Property<long>("GeneratorId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("generator_id");

                    b.Property<byte[]>("GeneratorPublicKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("generator_public_key");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long?>("NextBlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("next_block_id");

                    b.Property<long>("Nonce")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("nonce");

                    b.Property<byte[]>("PayloadHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("payload_hash");

                    b.Property<int>("PayloadLength")
                        .HasColumnType("int(11)")
                        .HasColumnName("payload_length");

                    b.Property<byte[]>("PreviousBlockHash")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("previous_block_hash");

                    b.Property<long?>("PreviousBlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("previous_block_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.Property<long>("TotalAmount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("total_amount");

                    b.Property<long>("TotalFee")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("total_fee");

                    b.Property<int>("Version")
                        .HasColumnType("int(11)")
                        .HasColumnName("version");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GeneratorId" }, "block_generator_id_idx");

                    b.HasIndex(new[] { "Height" }, "block_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "block_id_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "Timestamp" }, "block_timestamp_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "PreviousBlockId" }, "constraint_3c");

                    b.HasIndex(new[] { "NextBlockId" }, "constraint_3c5");

                    b.ToTable("block", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.BlockPoolWon", b =>
                {
                    b.Property<long>("GeneratorId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("generator_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("PoolId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("pool_id");

                    b.Property<bool>("Solo")
                        .HasColumnType("tinyint(1)");

                    b.ToView("block_pool_won");
                });

            modelBuilder.Entity("SignumExplorer.Models.BlockRewardRecipDesc", b =>
                {
                    b.Property<byte[]>("Ats")
                        .HasColumnType("blob")
                        .HasColumnName("ats");

                    b.Property<long>("BaseTarget")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("base_target");

                    b.Property<byte[]>("BlockSignature")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)")
                        .HasColumnName("block_signature");

                    b.Property<byte[]>("CumulativeDifficulty")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("cumulative_difficulty");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<byte[]>("GenerationSignature")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)")
                        .HasColumnName("generation_signature");

                    b.Property<long>("GeneratorId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("generator_id");

                    b.Property<byte[]>("GeneratorPublicKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("generator_public_key");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long?>("NextBlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("next_block_id");

                    b.Property<long>("Nonce")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("nonce");

                    b.Property<byte[]>("PayloadHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("payload_hash");

                    b.Property<int>("PayloadLength")
                        .HasColumnType("int(11)")
                        .HasColumnName("payload_length");

                    b.Property<byte[]>("PreviousBlockHash")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("previous_block_hash");

                    b.Property<long?>("PreviousBlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("previous_block_id");

                    b.Property<long?>("RecipId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recip_id");

                    b.Property<string>("RecipName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("recip_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.Property<long>("TotalAmount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("total_amount");

                    b.Property<long>("TotalFee")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("total_fee");

                    b.Property<long?>("TransactionCount")
                        .HasColumnType("bigint(21)")
                        .HasColumnName("transaction_count");

                    b.Property<int>("Version")
                        .HasColumnType("int(11)")
                        .HasColumnName("version");

                    b.ToView("block_reward_recip_desc");
                });

            modelBuilder.Entity("SignumExplorer.Models.EfmigrationsHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__EFMigrationsHistory", (string)null);
                });

            modelBuilder.Entity("SignumExplorer.Models.Escrow", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("amount");

                    b.Property<int>("Deadline")
                        .HasColumnType("int(11)")
                        .HasColumnName("deadline");

                    b.Property<int>("DeadlineAction")
                        .HasColumnType("int(11)")
                        .HasColumnName("deadline_action");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recipient_id");

                    b.Property<int?>("RequiredSigners")
                        .HasColumnType("int(11)")
                        .HasColumnName("required_signers");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("sender_id");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Deadline", "Height" }, "escrow_deadline_height_idx");

                    b.HasIndex(new[] { "Id", "Height" }, "escrow_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "RecipientId", "Height" }, "escrow_recipient_id_height_idx");

                    b.HasIndex(new[] { "SenderId", "Height" }, "escrow_sender_id_height_idx");

                    b.ToTable("escrow", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.EscrowDecision", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<int>("Decision")
                        .HasColumnType("int(11)")
                        .HasColumnName("decision");

                    b.Property<long>("EscrowId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("escrow_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId", "Height" }, "escrow_decision_account_id_height_idx");

                    b.HasIndex(new[] { "EscrowId", "AccountId", "Height" }, "escrow_decision_escrow_id_account_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "EscrowId", "Height" }, "escrow_decision_escrow_id_height_idx");

                    b.ToTable("escrow_decision", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.FlywaySchemaHistory", b =>
                {
                    b.Property<int>("InstalledRank")
                        .HasColumnType("int(11)")
                        .HasColumnName("installed_rank");

                    b.Property<int?>("Checksum")
                        .HasColumnType("int(11)")
                        .HasColumnName("checksum");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("ExecutionTime")
                        .HasColumnType("int(11)")
                        .HasColumnName("execution_time");

                    b.Property<string>("InstalledBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("installed_by");

                    b.Property<DateTime>("InstalledOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("installed_on")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("script");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("success");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("version");

                    b.HasKey("InstalledRank")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Success" }, "flyway_schema_history_s_idx");

                    b.ToTable("flyway_schema_history", (string)null);
                });

            modelBuilder.Entity("SignumExplorer.Models.Good", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<bool>("Delisted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delisted");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("seller_id");

                    b.Property<string>("Tags")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tags");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id", "Height" }, "goods_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "SellerId", "Name" }, "goods_seller_id_name_idx");

                    b.HasIndex(new[] { "Timestamp", "Height" }, "goods_timestamp_idx");

                    b.ToTable("goods", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.IndirectIncoming", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("transaction_id");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId", "TransactionId" }, "indirect_incoming_db_id_uindex")
                        .IsUnique();

                    b.HasIndex(new[] { "Height" }, "indirect_incoming_index");

                    b.ToTable("indirect_incoming", (string)null);
                });

            modelBuilder.Entity("SignumExplorer.Models.LatestAccountRewardRecip", b =>
                {
                    b.Property<long>("Balance")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("balance");

                    b.Property<int>("CreationHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("creation_height");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long>("ForgedBalance")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("forged_balance");

                    b.Property<int?>("FromHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("from_height");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<int?>("KeyHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("key_height");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<byte[]>("PublicKey")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("public_key");

                    b.Property<string>("RecipDescrip")
                        .HasColumnType("text")
                        .HasColumnName("recip_descrip")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long?>("RecipId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recip_id");

                    b.Property<string>("RecipName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("recip_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long>("UnconfirmedBalance")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("unconfirmed_balance");

                    b.ToView("latest_account_reward_recip");
                });

            modelBuilder.Entity("SignumExplorer.Models.LatestAskOrder", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssetName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("asset_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long?>("AssetQuantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_quantity");

                    b.Property<int>("CreationHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("creation_height");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<sbyte?>("Decimals")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("decimals");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.ToView("latest_ask_order");
                });

            modelBuilder.Entity("SignumExplorer.Models.LatestBidOrder", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssetName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("asset_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long?>("AssetQuantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_quantity");

                    b.Property<int>("CreationHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("creation_height");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<sbyte?>("Decimals")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("decimals");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.ToView("latest_bid_order");
                });

            modelBuilder.Entity("SignumExplorer.Models.MultiOutTransactionAttach", b =>
                {
                    b.Property<long>("Amount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("amount");

                    b.Property<byte[]>("AttachmentBytes")
                        .HasColumnType("blob")
                        .HasColumnName("attachment_bytes");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("fee");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("sender_id");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sender_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<sbyte>("Subtype")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("subtype");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("type");

                    b.ToView("multi_out_transaction_attach");
                });

            modelBuilder.Entity("SignumExplorer.Models.Peer", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.HasKey("Address")
                        .HasName("PRIMARY");

                    b.ToTable("peer", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.Purchase", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("BuyerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("buyer_id");

                    b.Property<int>("Deadline")
                        .HasColumnType("int(11)")
                        .HasColumnName("deadline");

                    b.Property<long>("Discount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("discount");

                    b.Property<byte[]>("Goods")
                        .HasColumnType("blob")
                        .HasColumnName("goods");

                    b.Property<long>("GoodsId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("goods_id");

                    b.Property<byte[]>("GoodsNonce")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("goods_nonce");

                    b.Property<bool>("HasFeedbackNotes")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_feedback_notes");

                    b.Property<bool>("HasPublicFeedbacks")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_public_feedbacks");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte[]>("Nonce")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("nonce");

                    b.Property<byte[]>("Note")
                        .HasColumnType("blob")
                        .HasColumnName("note");

                    b.Property<bool>("Pending")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("pending");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<long>("Refund")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("refund");

                    b.Property<byte[]>("RefundNonce")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("refund_nonce");

                    b.Property<byte[]>("RefundNote")
                        .HasColumnType("blob")
                        .HasColumnName("refund_note");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("seller_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BuyerId", "Height" }, "purchase_buyer_id_height_idx");

                    b.HasIndex(new[] { "Deadline", "Height" }, "purchase_deadline_idx");

                    b.HasIndex(new[] { "Id", "Height" }, "purchase_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "SellerId", "Height" }, "purchase_seller_id_height_idx");

                    b.HasIndex(new[] { "Timestamp", "Id" }, "purchase_timestamp_idx");

                    b.ToTable("purchase", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.PurchaseFeedback", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<byte[]>("FeedbackData")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("feedback_data");

                    b.Property<byte[]>("FeedbackNonce")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("feedback_nonce");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id", "Height" }, "purchase_feedback_id_height_idx");

                    b.ToTable("purchase_feedback", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.PurchasePublicFeedback", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("PublicFeedback")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("public_feedback");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id", "Height" }, "purchase_public_feedback_id_height_idx");

                    b.ToTable("purchase_public_feedback", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.RewardRecipAssign", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<int>("FromHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("from_height");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("PrevRecipId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("prev_recip_id");

                    b.Property<long>("RecipId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recip_id");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId", "Height" }, "reward_recip_assign_account_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "RecipId", "Height" }, "reward_recip_assign_recip_id_height_idx");

                    b.ToTable("reward_recip_assign", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.RewardRecipNameDesc", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("account_id");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<int>("FromHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("from_height");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("PrevRecipId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("prev_recip_id");

                    b.Property<string>("RecipDescrip")
                        .HasColumnType("text")
                        .HasColumnName("recip_descrip")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long>("RecipId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recip_id");

                    b.Property<string>("RecipName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("recip_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.ToView("reward_recip_name_desc");
                });

            modelBuilder.Entity("SignumExplorer.Models.Subscription", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("amount");

                    b.Property<int>("Frequency")
                        .HasColumnType("int(11)")
                        .HasColumnName("frequency");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<bool?>("Latest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("latest")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recipient_id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("sender_id");

                    b.Property<int>("TimeNext")
                        .HasColumnType("int(11)")
                        .HasColumnName("time_next");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id", "Height" }, "subscription_id_height_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "RecipientId", "Height" }, "subscription_recipient_id_height_idx");

                    b.HasIndex(new[] { "SenderId", "Height" }, "subscription_sender_id_height_idx");

                    b.HasIndex(new[] { "TimeNext" }, "subscription_time_next_index");

                    b.ToTable("subscription", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.Trade", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<int>("AskOrderHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("ask_order_height");

                    b.Property<long>("AskOrderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("ask_order_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<int>("BidOrderHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("bid_order_height");

                    b.Property<long>("BidOrderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("bid_order_id");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("block_id");

                    b.Property<long>("BuyerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("buyer_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("seller_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AskOrderId", "BidOrderId" }, "trade_ask_bid_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "AssetId", "Height" }, "trade_asset_id_idx");

                    b.HasIndex(new[] { "BuyerId", "Height" }, "trade_buyer_id_idx");

                    b.HasIndex(new[] { "SellerId", "Height" }, "trade_seller_id_idx");

                    b.ToTable("trade", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.TradeAssetDetail", b =>
                {
                    b.Property<int>("AskOrderHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("ask_order_height");

                    b.Property<long>("AskOrderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("ask_order_id");

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssetName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("asset_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<long?>("AssetQuantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("asset_quantity");

                    b.Property<int>("BidOrderHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("bid_order_height");

                    b.Property<long>("BidOrderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("bid_order_id");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("block_id");

                    b.Property<long>("BuyerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("buyer_id");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<sbyte?>("Decimals")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("decimals");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Price")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("quantity");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("seller_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.ToView("trade_asset_detail");
                });

            modelBuilder.Entity("SignumExplorer.Models.Transaction", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("amount");

                    b.Property<byte[]>("AttachmentBytes")
                        .HasColumnType("blob")
                        .HasColumnName("attachment_bytes");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("block_id");

                    b.Property<int>("BlockTimestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("block_timestamp");

                    b.Property<short>("Deadline")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("deadline");

                    b.Property<int?>("EcBlockHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("ec_block_height");

                    b.Property<long?>("EcBlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("ec_block_id");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("fee");

                    b.Property<byte[]>("FullHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("full_hash");

                    b.Property<bool>("HasEncryptedMessage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_encrypted_message");

                    b.Property<bool>("HasEncrypttoselfMessage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_encrypttoself_message");

                    b.Property<bool>("HasMessage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_message");

                    b.Property<bool>("HasPublicKeyAnnouncement")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_public_key_announcement");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long?>("RecipientId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recipient_id");

                    b.Property<byte[]>("ReferencedTransactionFullhash")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("referenced_transaction_fullhash");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("sender_id");

                    b.Property<byte[]>("SenderPublicKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("sender_public_key");

                    b.Property<byte[]>("Signature")
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)")
                        .HasColumnName("signature");

                    b.Property<sbyte>("Subtype")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("subtype");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("type");

                    b.Property<sbyte>("Version")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("version");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BlockId" }, "constraint_ff");

                    b.HasIndex(new[] { "BlockTimestamp" }, "transaction_block_timestamp_idx");

                    b.HasIndex(new[] { "FullHash" }, "transaction_full_hash_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "Height", "Timestamp" }, "transaction_height_timestamp");

                    b.HasIndex(new[] { "Id" }, "transaction_id_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "RecipientId", "Amount", "Height" }, "transaction_recipient_id_amount_height_idx");

                    b.HasIndex(new[] { "RecipientId" }, "transaction_recipient_id_idx");

                    b.HasIndex(new[] { "SenderId" }, "transaction_sender_id_idx");

                    b.ToTable("transaction", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.TransactionAccountName", b =>
                {
                    b.Property<long>("Amount")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("amount");

                    b.Property<byte[]>("AttachmentBytes")
                        .HasColumnType("blob")
                        .HasColumnName("attachment_bytes");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("block_id");

                    b.Property<int>("BlockTimestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("block_timestamp");

                    b.Property<long>("DbId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<short>("Deadline")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("deadline");

                    b.Property<int?>("EcBlockHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("ec_block_height");

                    b.Property<long?>("EcBlockId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("ec_block_id");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("fee");

                    b.Property<byte[]>("FullHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("full_hash");

                    b.Property<bool>("HasEncryptedMessage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_encrypted_message");

                    b.Property<bool>("HasEncrypttoselfMessage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_encrypttoself_message");

                    b.Property<bool>("HasMessage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_message");

                    b.Property<bool>("HasPublicKeyAnnouncement")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_public_key_announcement");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long?>("RecipientId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("recipient_id");

                    b.Property<string>("RecipientName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("recipient_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<byte[]>("ReferencedTransactionFullhash")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("referenced_transaction_fullhash");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("sender_id");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sender_name")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<byte[]>("SenderPublicKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)")
                        .HasColumnName("sender_public_key");

                    b.Property<byte[]>("Signature")
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)")
                        .HasColumnName("signature");

                    b.Property<sbyte>("Subtype")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("subtype");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("type");

                    b.Property<sbyte>("Version")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("version");

                    b.ToView("transaction_account_names");
                });

            modelBuilder.Entity("SignumExplorer.Models.UnconfirmedTransaction", b =>
                {
                    b.Property<long>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("db_id");

                    b.Property<int>("Expiration")
                        .HasColumnType("int(11)")
                        .HasColumnName("expiration");

                    b.Property<long>("FeePerByte")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("fee_per_byte");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int(11)")
                        .HasColumnName("timestamp");

                    b.Property<byte[]>("TransactionBytes")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("transaction_bytes");

                    b.Property<int>("TransactionHeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("transaction_height");

                    b.HasKey("DbId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TransactionHeight", "FeePerByte", "Timestamp" }, "unconfirmed_transaction_height_fee_timestamp_idx");

                    b.HasIndex(new[] { "Id" }, "unconfirmed_transaction_id_idx")
                        .IsUnique();

                    b.ToTable("unconfirmed_transaction", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("SignumExplorer.Models.Block", b =>
                {
                    b.HasOne("SignumExplorer.Models.Block", "NextBlock")
                        .WithMany("InverseNextBlock")
                        .HasForeignKey("NextBlockId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("constraint_3c5");

                    b.HasOne("SignumExplorer.Models.Block", "PreviousBlock")
                        .WithMany("InversePreviousBlock")
                        .HasForeignKey("PreviousBlockId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("constraint_3c");

                    b.Navigation("NextBlock");

                    b.Navigation("PreviousBlock");
                });

            modelBuilder.Entity("SignumExplorer.Models.Transaction", b =>
                {
                    b.HasOne("SignumExplorer.Models.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("constraint_ff");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("SignumExplorer.Models.Block", b =>
                {
                    b.Navigation("InverseNextBlock");

                    b.Navigation("InversePreviousBlock");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
