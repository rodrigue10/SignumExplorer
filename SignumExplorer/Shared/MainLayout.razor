
@inherits LayoutComponentBase


<MudLayout>
    <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
    <MudThemeProvider Theme="_themeManager.Theme" />
    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        
            <MudSpacer />
                <MudAutocomplete T="string" Label="Search for Account, Block, Asset ID (not working...)" @bind-Value="value2" SearchFunc="@Search2"
                         ResetValueOnEmptyText="false"
                         CoerceText="false" CoerceValue="true"
                         AdornmentIcon="@Icons.Material.Outlined.Search" AdornmentColor="Color.Secondary" />
            
         <MudSpacer />

         @*Button to toggle dark mode.  Currently have Theme Manager implemented to work on color pallate for this*@
           @* <DarkMode></DarkMode>*@
            <ChooseLanguage></ChooseLanguage>
                <MudTooltip Text="GitHub repository (TODO...Mudblazor link for now...)">
                   <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Edge="Edge.End" Color="Color.Inherit" Link="https://github.com/rodrigue10/SignumExplorer" Target="_blank" />
                </MudTooltip>
                     <MudIconButton Icon="@Icons.Custom.Brands.Twitter" Color="Color.Inherit" Edge="Edge.End" />
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Inherit" Edge="Edge.Start" />
                    <MudText>S-TGS2-BU2Q-DBFR-DNATE</MudText>

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Signum Explorer</MudText>
        </MudDrawerHeader>
                <NavMenu />
  
    </MudDrawer>
    <MudMainContent>   
        <MudContainer Class="content px-4">
                        @Body
        </MudContainer>

    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;


    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
public bool _themeManagerOpen = false;

void OpenThemeManager(bool value)
{
    _themeManagerOpen = value;
}

void UpdateTheme(ThemeManagerTheme value)
{
    _themeManager = value;
    StateHasChanged();
}

protected override void OnInitialized()
{
    StateHasChanged();
}
  


    private string value2;

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}

