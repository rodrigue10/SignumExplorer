@namespace SignumExplorer.Pages

@page "/accounts"

@inject ISignumDataService SignumService
@inject IStringLocalizer<App> L

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

@if (count == null)
{

}
else
{   
 
    <MudGrid>
        <MudItem xs="12">
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search for name or ID" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudItem>
        <MudItem xs="12">
            <MudTable HorizontalScrollbar="true" Breakpoint="Breakpoint.None"   RowsPerPage="100" ServerData="@(new Func<TableState, Task<TableData<IAccount>>>(ServerReload))" 
                    @ref="table" FixedHeader="true" Dense="true" Hover="true" Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h5">Accounts</MudText>
                                         
                </ToolBarContent>
                <HeaderContent>
                  
                    <MudTh>
                    <MudTableSortLabel SortLabel="accountid_field" T="IAccount">
                    Account Id
                    </MudTableSortLabel>



                    </MudTh>

                    <MudTh>Account RS</MudTh>
                    <MudTh>
                    <MudTableSortLabel SortLabel="name_field" T="IAccount">
                    Name
                    </MudTableSortLabel>
                    </MudTh>
     

                    <MudTh>
                    <MudTableSortLabel SortLabel="balance_field" T="IAccount">
                    Balance
                    </MudTableSortLabel>
                    </MudTh>

                    <MudTh>Unconfirmed Balance</MudTh>
                    <MudTh>Forged Balance</MudTh>

                    <MudTh>
                    <MudTableSortLabel SortLabel="height_field" T="IAccount">
                    Creation Height
                    </MudTableSortLabel>
                    </MudTh>

                </HeaderContent>
                <RowTemplate>
		

                    <MudTd DataLabel="Account Id"><MudLink Typo="Typo.overline" Underline="Underline.None" Href=@($"/accounts/{context.AccountId}")>@context.AccountId</MudLink> </MudTd>
                    <MudTd DataLabel="Account RS">   <MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.AccountId}")>@context.IdRS</MudLink> </MudTd>
                    <MudTd DataLabel="Name"><MudText Style="overflow-wrap:anywhere"  Typo="Typo.caption">@context.Name</MudText></MudTd>
                    <MudTd DataLabel="Balance"><MudText Typo="Typo.caption">@context.Balance.ToString("N0")</MudText></MudTd>
                    <MudTd DataLabel="Unconfirmed Balance"><MudText Typo="Typo.caption">@context.UnconfirmedBalance.ToString("N0")</MudText></MudTd>
                    <MudTd DataLabel="Forged Balance"><MudText Typo="Typo.caption">@context.ForgedBalance.ToString("N0")</MudText></MudTd>
                  <MudTd DataLabel="Creation Height"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/blocksheight/{(long)context.CreationHeight}")>@context.CreationHeight</MudLink></MudTd>

                </RowTemplate>                     
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
        </MudGrid>
        }


    
    </MudContainer>


@code {

    private NodeCounts? counts;
    private IEnumerable<IAccount>? data;
    private MudTable<IAccount>? table;
    private int totalItems;
    private string searchString = "";
    private int? count;



    protected override async Task OnInitializedAsync()
    {
        //counts = await SignumService.NodeCountItems();
        count = await SignumService.AccountCount();
    }

    private async Task<TableData<IAccount>> ServerReload(TableState state)
    {

        //totalItems = count.Value;

        var sortDir = (int)state.SortDirection;
        string? sortLabel = null;

        switch (state.SortLabel)
        {

            case "height_field":
                sortLabel = nameof(IAccount.CreationHeight);
                break;
            case "accountid_field":
                sortLabel = nameof(IAccount.AccountId);
                break;
            case "name_field":
                sortLabel = nameof(IAccount.Name);
                break;
            case "balance_field":
                sortLabel = nameof(IAccount.Balance);
                break;

            default:
                sortLabel = "";
                break;

        }        
        data = await SignumService.GetFilteredSortedPagedAccounts(searchString, sortLabel, state.Page, state.PageSize, sortDir );

        totalItems = data.Count();
        return new TableData<IAccount>() {TotalItems = totalItems, Items = data};
    }

    private void OnSearch(string text)
    {
        searchString = text;

        table.ReloadServerData();

    }




}
