@inject ISignumDataService SignumService


        @if (blocks == null)
        {
            <p><em>Loading Blocks...</em></p>
        }
        else
        {    

           <MudTable Items="@blocks" RowsPerPage="100" FixedHeader="true" Dense="true" Hover="true" Bordered="false" Striped="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Blocks</MudText>
             
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Block Height</MudTh>
                <MudTh>Date/Time</MudTh>
                <MudTh>Txn</MudTh>
                <MudTh>Total Amount</MudTh>
                <MudTh>Total Fee</MudTh>
                <MudTh>Size</MudTh>
                <MudTh>Generator ID</MudTh>


            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Block Height"><MudLink Underline="Underline.None" Href=@($"/blocks/{context.Id}")>@context.Height</MudLink></MudTd>
                <MudTd DataLabel="Date/Time">@context.Time.ToLocalTime().ToString("G")</MudTd>
                <MudTd DataLabel="Txn">@context.Transactions.Count</MudTd>
                <MudTd DataLabel="Total Amount">@($"{context.TotalAmount} Signa")</MudTd>
                <MudTd DataLabel="Total Fee">@($"{context.TotalFee} Signa")</MudTd>
                <MudTd DataLabel="Size">@($"{context.PayloadLength} bytes")</MudTd>
                <MudTd DataLabel="Generator ID"><MudLink Underline="Underline.None" Href=@($"/accounts/{context.GeneratorId}")>@context.GeneratorRS</MudLink></MudTd>
                


            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
                </MudTable>
 }





@code {

    [Parameter]
    public ulong? AccountId { get; set; }

    private IEnumerable<IBlock>? blocks;

    protected override async Task OnInitializedAsync()
    {  
        if(AccountId == null)
        {
                 blocks =  await SignumService.GetBlocksAsync();   
        }
        else
        {
            blocks = await SignumService.GetAccountBlocks((long)AccountId);
        }


    }
}