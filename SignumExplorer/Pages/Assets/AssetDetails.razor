@namespace SignumExplorer.Pages

@page "/assets/{assetid}"

@inject ISignumDataService SignumService
@inject IJSRuntime JS
@inject IStringLocalizer<App> L

@implements IAsyncDisposable

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">


@if (AssetDet == null || assetCounts == null)
{
    <p><em>@L["Loading"] Asset Details...</em></p>
}
else
{  
            
    <MudGrid>
        <MudItem xs="12">
            <PropertiesTable InputObject="AssetDet" InterfaceType="typeof(IAsset)" TableText="@($"{L["Asset Details"]} - {AssetDet.Id}")"/>
        </MudItem>         
    </MudGrid>

    <MudTabs>
        <MudTabPanel  OnClick="()=>RenderTradeGraph()" Icon="@Icons.Material.Filled.Sell" ToolTip="@L["OpenOrders"]" BadgeData="@assetCounts.TotalOpenOrders.ToString()" BadgeColor="Color.Secondary">
            <MudGrid>
                <MudItem xs="12">
                    <div id="stockcontrols"></div>
                    <div id="chartstockbasic"></div> 
                </MudItem>


            @if (AssetAsks == null)
            {
                <p><em>@L["Loading"]...</em></p>
            }
            else
            {   
  
                <MudItem xs="12" sm="6">
                    <MudTable HorizontalScrollbar="true" Breakpoint="Breakpoint.None" Items="@AssetAsks" FixedHeader="true" Dense="true" Height="350px" Hover="true" Bordered="false" Striped="true">
                        <ToolBarContent>
                        <MudText Typo="Typo.h6">@L["AskOrders"] (@AssetAsks.Count())</MudText>             
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>@L["Seller"]</MudTh>
                            <MudTh>@L["Total"]</MudTh>
                            <MudTh>@L["Quantity"]</MudTh>
                            <MudTh>@L["Price"]</MudTh>
                        </HeaderContent>
                        <RowTemplate >
                            <MudTd DataLabel="Seller"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.AccountId}")>@context.AccountRS</MudLink></MudTd>
                            <MudTd DataLabel="Total"><MudText Typo="Typo.caption"> @(context.Price * context.Quantity/Math.Pow(10,8)) </MudText></MudTd>
                            <MudTd DataLabel="Quantity"><MudText Typo="Typo.caption">  @(context.Quantity/Math.Pow(10, context.Decimals.Value))</MudText></MudTd>
                            <MudTd DataLabel="Price"><MudText Typo="Typo.caption"> @(context.Price/ Math.Pow(10,(8 - context.Decimals.Value))) </MudText></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>

            }
    
            @if (AssetBids == null)
            {
                <p><em>@L["Loading"]...</em></p>
            }
            else
            {   
                <MudItem xs="12" sm="6">
                    <MudTable HorizontalScrollbar="true" Breakpoint="Breakpoint.None" Items="@AssetBids" FixedHeader="true" Height="350px" Dense="true" Hover="true" Bordered="false" Striped="true">
                        <ToolBarContent>
                          <MudText Typo="Typo.h6">@L["BidOrders"] (@AssetBids.Count())</MudText>             
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>@L["Price"]</MudTh>
                            <MudTh>@L["Quantity"]</MudTh>
                            <MudTh>@L["Total"]</MudTh>
                            <MudTh>@L["Buyer"]</MudTh>
                        </HeaderContent>
                        <RowTemplate >
                            <MudTd DataLabel="Price"><MudText Typo="Typo.caption">  @(context.Price / Math.Pow(10,(8 - context.Decimals.Value)))</MudText></MudTd>
                            <MudTd DataLabel="Quantity"><MudText Typo="Typo.caption"> @(context.Quantity/Math.Pow(10, context.Decimals.Value)) </MudText></MudTd>
                            <MudTd DataLabel="Total"><MudText Typo="Typo.caption"> @(context.Price * context.Quantity/Math.Pow(10,8)) </MudText></MudTd>
                            <MudTd DataLabel="Buyer"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.AccountId}")>@context.AccountRS</MudLink></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
            }
            </MudGrid>
   


                </MudTabPanel>

                <MudTabPanel Icon="@Icons.Material.Filled.AlignVerticalCenter" ToolTip="@L["Trades"]" BadgeData="@assetCounts.Trades.ToString()" BadgeColor="Color.Secondary">
                    


                    
                                                   


                                @if (AssetTrades == null)
                                {
                                <p><em>@L["Loading"]...</em></p>
                                }
                                else
                                {    
                                    
                                    <MudGrid>
                                    <MudItem xs="12">

                                    <MudTable Items="@AssetTrades" FixedHeader="true" Dense="true" Hover="true" Bordered="false" Striped="true">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">@L["Asset"] @L["Trades"]</MudText>
             
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>@L["Height"]</MudTh>
                                    <MudTh>@L["DateTime"]</MudTh>
                                    <MudTh>@L["Quantity"]</MudTh>
                                    <MudTh>@L["Price"]</MudTh>
                                    <MudTh>@L["SellerId"]</MudTh>
                                    <MudTh>@L["BuyerId"]</MudTh>
                                    <MudTh>@L["AskOrderId"]</MudTh>
                                    <MudTh>@L["BidOrderId"]</MudTh>

                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Height"> <MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/blocksheight/{context.Height}")>@context.Height</MudLink></MudTd>
                                    <MudTd DataLabel="Date/Time"><MudText Typo="Typo.caption">@context.Time</MudText></MudTd>
                                    <MudTd DataLabel="Quantity"><MudText Typo="Typo.caption"> @(context.Quantity/Math.Pow(10, context.Decimals.Value)) </MudText></MudTd>
                                    <MudTd DataLabel="Price"><MudText Typo="Typo.caption"> @(context.Price/Math.Pow(10, (8 - context.Decimals.Value)))   </MudText></MudTd>
                                    <MudTd DataLabel="Seller ID"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.SellerId}")>@context.SellerRS</MudLink></MudTd>
                                    <MudTd DataLabel="Buyer ID"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.BuyerId}")>@context.BuyerRS</MudLink></MudTd>
                                    <MudTd DataLabel="Ask Order ID"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/transactions/{context.AskOrderId}")>@context.AskOrderId</MudLink></MudTd>
                                    <MudTd DataLabel="Bid Order ID"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/transactions/{context.BidOrderId}")>@context.BidOrderId</MudLink></MudTd>


                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>
                                </MudTable>
                                    </MudItem>
                                        </MudGrid>

                                }
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.ReadMore" ToolTip="@L["Transfers"]" BadgeData="@assetCounts.Transfers.ToString()" BadgeColor="Color.Secondary">
            
                    @if (AssetTransfers == null ) 
                    {
                        <p><em>@L["Loading"]...</em></p>
                    }
                    else
                    {

                        <MudGrid>                                                    
                            <MudItem xs="12">
                                <MudTable HorizontalScrollbar="true" Breakpoint="Breakpoint.None" Items="@AssetTransfers" FixedHeader="true" Dense="true" Hover="true" Bordered="false" Striped="true">
                                    <ToolBarContent>
                                        <MudText Typo="Typo.h6"> @L["Asset"] @L["Transfers"]</MudText>             
                                    </ToolBarContent>
                                    <HeaderContent>
                                        <MudTh>@L["Height"]</MudTh>
                                        <MudTh>@L["DateTime"]</MudTh>
                                        <MudTh>@L["Quantity"]</MudTh>
                                        <MudTh>@L["Sender"]</MudTh>
                                        <MudTh>@L["Recipient"]</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Height"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/blocksheight/{context.Height}")>@context.Height</MudLink></MudTd>
                                        <MudTd DataLabel="Date/Time"><MudText Typo="Typo.caption">@context.Time</MudText></MudTd>
                                        <MudTd DataLabel="Quantity"><MudText Typo="Typo.caption">@(context.Quantity/Math.Pow(10,context.Decimals.Value))</MudText></MudTd>
                                        <MudTd DataLabel="Sender"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.SenderId}")>@context.SenderRS</MudLink></MudTd>
                                        <MudTd DataLabel="Recipient"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.RecipientId}")>@context.RecipientRS</MudLink></MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager />
                                    </PagerContent>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    }
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.People" ToolTip="@L["Holders"]" BadgeData="@assetCounts.Holders.ToString()" BadgeColor="Color.Secondary">
              
                         @if (AssetHolders == null || AssetDet == null) 
                        {
                            <p><em>@L["Loading"]...</em></p>
                        }
                        else
                        {
                            <MudGrid>                                                    
                                <MudItem xs="12">
                                        <MudTable HorizontalScrollbar="true" Breakpoint="Breakpoint.None" Items="@AssetHolders" FixedHeader="true" Dense="true" Hover="true" Bordered="false" Striped="true">
                                        <ToolBarContent>
                                            <MudText Typo="Typo.h6"> @L["Asset"] @L["Holders"]</MudText>
                                        </ToolBarContent>
                                            <HeaderContent>
                                            <MudTh>@L["Height"]</MudTh>
                                            <MudTh>@L["Account"]</MudTh>
                                            <MudTh>@L["Quantity"]</MudTh>
                                            <MudTh>@L["UnconfirmedQuantity"]</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                            <MudTd DataLabel="Height"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/blocksheight/{context.Height}")>@context.Height</MudLink></MudTd>
                                            <MudTd DataLabel="Account"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.AccountId}")>@context.AccountRS</MudLink></MudTd>
                                            <MudTd DataLabel="Quantity"><MudText Typo="Typo.caption"> @(context.Quantity/Math.Pow(10,AssetDet.Decimals))   </MudText></MudTd>
                                            <MudTd DataLabel="Unconfirmed Quantity"><MudText Typo="Typo.caption">
                                                @(context.UnconfirmedQuantity/Math.Pow(10,AssetDet.Decimals))</MudText></MudTd>
                                            </RowTemplate>
                                        <PagerContent>
                                            <MudTablePager />
                                        </PagerContent>
                                        </MudTable>
                                </MudItem>
                            </MudGrid>
                        }

                </MudTabPanel>
            </MudTabs>
       }



</MudContainer>




@code {
    private IEnumerable<ITrade>? AssetTrades;
    private IEnumerable<IBidOrder>? AssetBids;
    private IEnumerable<IAskOrder>? AssetAsks;
    private IEnumerable<IAssetTransfer>? AssetTransfers;
    private IAsset? AssetDet;
    private IEnumerable<IAccountAsset>? AssetHolders;
    private AssetCounts? assetCounts;

    private IJSObjectReference _jsModule;

    private Task<IJSObjectReference> _moduleLoad;
    private Task<IJSObjectReference> ModuleLoad => _moduleLoad ??= JS.InvokeAsync<IJSObjectReference>("import", "./js/StockChart.js").AsTask();

    private List<TradeData> tradeData;



    [Parameter]
    public string? Assetid { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
        await base.OnParametersSetAsync();

    }

    protected override async Task OnInitializedAsync()
    {


        if (Assetid != null)
        {

            AssetDet = await SignumService.GetAsset(Assetid);
            AssetBids = await SignumService.GetBidOrders((long)UInt64.Parse(Assetid));
            AssetAsks = await SignumService.GetAskOrders((long)UInt64.Parse(Assetid));
            AssetTransfers = await SignumService.GetAssetTransfers((long)UInt64.Parse(Assetid));

            AssetTrades = await SignumService.GetTrades((long)UInt64.Parse(Assetid));

            assetCounts = await SignumService.AssetCounts((long)UInt64.Parse(Assetid));
            AssetHolders = await SignumService.GetAssetHolders((long)UInt64.Parse(Assetid));

            tradeData = RenderTradeGraph();

        }

    }


    private List<TradeData> RenderTradeGraph()
    {

        var aggregation = new List<TradeData>();

        if (AssetTrades != null && AssetDet != null)
        {
            return AssetTrades
                        .GroupBy(z => z.Date)
                        .Select(g => new TradeData()
                            {
                                Date = g.First().Date,
                                Height = g.First().Height,
                                Volume = g.Sum(x => x.Quantity / Math.Pow(10, AssetDet.Decimals)),
                                Average = g.Average(x => x.Price / Math.Pow(10, 8 - AssetDet.Decimals)),
                                Findcount = g.Count(),
                                Minprice = g.Min(x => x.Price),
                                Maxprice = g.Max(x => x.Price)


                            }).ToList<TradeData>();




        }

        else return new List<TradeData>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            var module = await ModuleLoad;
            await module.InvokeVoidAsync("StockChart", tradeData);
            await base.OnAfterRenderAsync(firstRender);    

        }

        public async ValueTask DisposeAsync()
            {

                        if (_moduleLoad != null)
                {
                    var moduleLoad = await _moduleLoad;
                    await moduleLoad.DisposeAsync();
                }
            }


}
