@namespace SignumExplorer.Pages

@page "/ats"

@inject ISignumDataService SignumService
@inject IStringLocalizer<App> L

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

@if (count == null)
{

}
else
{   
 
    <MudGrid>
            <MudItem xs="12">
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="@L["Search"]" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
            </MudItem>
        <MudItem xs="12">
            <MudTable  HorizontalScrollbar="true" Breakpoint="Breakpoint.None" RowsPerPage="50" ServerData="@(new Func<TableState, Task<TableData<IAt>>>(ServerReload))" 
                    @ref="table" FixedHeader="true" Dense="true" Hover="true" Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Smart Contracts</MudText>
                     <MudSpacer /> 

                                         
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortLabel="height_field" T="IAt">
                         Height
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Creator</MudTh> 

                    <MudTh>
                    <MudTableSortLabel SortLabel="name_field" T="IAt">
                       Name
                    </MudTableSortLabel>
                    </MudTh>
                       <MudTh>Smart Contract</MudTh>
                    <MudTh>Latest</MudTh>


                </HeaderContent>
                <RowTemplate>
		             <MudTd DataLabel="Height"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/blocksheight/{(long)context.Height}")>@context.Height</MudLink></MudTd>
                    <MudTd DataLabel="Creator RS">   <MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/accounts/{context.CreatorId}")>@context.CreatorRS</MudLink> </MudTd>
                    <MudTd DataLabel="Name"><MudText Typo="Typo.caption">@context.Name</MudText></MudTd>
                    <MudTd DataLabel="At RS"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/ats/{context.Id}")>@context.AtIdRS</MudLink></MudTd>
                    <MudTd DataLabel="Latest"><MudText Typo="Typo.caption">@context.Latest</MudText></MudTd>
                  
                </RowTemplate>                     
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
        </MudGrid>
        }


    
    </MudContainer>


@code {

    private NodeCounts? counts;
    private IEnumerable<IAt>? data;
    private MudTable<IAt>? table;
    private int totalItems;
    private string searchString = "";
    private int? count;



    protected override async Task OnInitializedAsync()
    {
        //counts = await SignumService.NodeCountItems();
        count = await SignumService.ATCount();
    }

    private async Task<TableData<IAt>> ServerReload(TableState state)
    {

        totalItems = count.Value;

        var sortDir = (int)state.SortDirection;
        string? sortLabel = null;

        switch (state.SortLabel)
        {

            case "height_field":
                sortLabel = nameof(IAt.Height);
                break;
                case "name_field":
                sortLabel = nameof(IAt.Name);
                break;


            default:
                sortLabel = "";
            break;

        }        
         data = await SignumService.GetFilteredSortedPagedAts(searchString, sortLabel, state.Page, state.PageSize, sortDir );

        return new TableData<IAt>() {TotalItems = totalItems, Items = data};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }




}
