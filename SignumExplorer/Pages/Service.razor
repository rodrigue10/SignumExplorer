@using SignumExplorer

@page "/Service"
@inject MultiOutProcessor _customBackgroundService
@inject PoolBlocksProcessor _poolBlocksProcessor
@inject CoinGeckoProcessor _coinGeckoProcessor
 
<h3>Service Multi-Out</h3>
 
<p><div hidden="@HideIsRunning">Running</div></p>
 
<button name="startButton" class="btn btn-primary" @onclick="Start">Start</button>
<button class="btn btn-primary" @onclick="Stop">Stop</button>

<h3>Service Pool Blocks</h3>
 
<p><div hidden="@HideIsRunningBlock">Running</div></p>
 
<button name="startButtonBlock" class="btn btn-primary" @onclick="StartBlock">Start</button>
<button class="btn btn-primary" @onclick="StopBlock">Stop</button>

<h3>Service CoinGeckoAPI</h3>
 
<p><div hidden="@HideIsRunningGecko">Running</div></p>
 
<button name="startButtonGecko" class="btn btn-primary" @onclick="StartGecko">Start</button>
<button class="btn btn-primary" @onclick="StopGecko">Stop</button>
 
@code {

    private bool _isRunning { get; set; }
    public bool HideIsRunning => !_isRunning;

    private bool _isRunningBlock { get; set; }
    public bool HideIsRunningBlock => !_isRunningBlock;

    private bool _isRunningGecko { get; set; }
    public bool HideIsRunningGecko => !_isRunningGecko;



    protected override void OnInitialized()
    {
        _isRunning = _customBackgroundService.IsRunning;
        _isRunningBlock = _poolBlocksProcessor.IsRunning;
        _isRunningGecko = _coinGeckoProcessor.IsRunning;

        base.OnInitialized();
    }

    private async Task Start()
    {
        if(!_customBackgroundService.IsRunning)
            await _customBackgroundService.StartAsync(new System.Threading.CancellationToken());
        _isRunning = _customBackgroundService.IsRunning;

    }

    private async Task Stop()
    {
        if(_customBackgroundService.IsRunning)
            await _customBackgroundService.StopAsync(new System.Threading.CancellationToken());
        _isRunning = _customBackgroundService.IsRunning;
    }


    private async Task StartBlock()
    {
        if(!_poolBlocksProcessor.IsRunning)
            await _poolBlocksProcessor.StartAsync(new System.Threading.CancellationToken());
        _isRunningBlock = _poolBlocksProcessor.IsRunning;

    }

    private async Task StopBlock()
    {
        if(_poolBlocksProcessor.IsRunning)
            await _poolBlocksProcessor.StopAsync(new System.Threading.CancellationToken());
        _isRunningBlock = _poolBlocksProcessor.IsRunning;
    }


    private async Task StartGecko()
    {
        if(!_coinGeckoProcessor.IsRunning)
            await _coinGeckoProcessor.StartAsync(new System.Threading.CancellationToken());
        _isRunningGecko = _coinGeckoProcessor.IsRunning;

    }

    private async Task StopGecko()
    {
        if (_coinGeckoProcessor.IsRunning)
            
        await _coinGeckoProcessor.StopAsync(new System.Threading.CancellationToken());
        _isRunningGecko = _coinGeckoProcessor.IsRunning;
    }
}
