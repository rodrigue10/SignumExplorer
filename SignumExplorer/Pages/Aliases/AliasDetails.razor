@namespace SignumExplorer.Pages
@page "/aliases/{aliasid}"

@inject ISignumDataService SignumService
@inject IJSRuntime JS
@inject IStringLocalizer<App> L

@inject IDialogService DialogService


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

 @if (AliasDet == null)
        {
            <p><em>Loading Details...</em></p>
        }
        else
        { 


            <MudGrid>
                <MudItem xs="12">
                        <PropertiesTable TableText="@($"{L["Alias Details"]} - {AliasDet.Id}")" InputObject="AliasDet" InterfaceType="typeof(IAlias)"></PropertiesTable>
                </MudItem>
            </MudGrid>
        }

        @if (counts == null)
        {
            <p><em>Loading Details...</em></p>
        }
        else
        { 
        <MudTabs  Elevation="2" Rounded="true" Centered="true">
        <MudTabPanel Icon="@Icons.Material.Filled.TransitEnterexit" ToolTip="Alias Offers"  BadgeData=@($"{counts.AliasOffers}") BadgeColor="Color.Secondary">

            @if (AliasOffers == null )
            {
                <p><em>Loading ...</em></p>
            }
            else
            {  

  
                <MudItem xs="12">
              <MudTable RowsPerPage="25" Items="@AliasOffers" RowStyle="overflow-wrap: anywhere;" HorizontalScrollbar="false" FixedHeader="true" Dense="true" Hover="true" Bordered="false" Striped="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Alias Offers</MudText>
             
            </ToolBarContent>
            <HeaderContent>
                         <MudTh>Height</MudTh>
                        <MudTh>DB ID</MudTh>
                        <MudTh>Buyer ID</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh>Latest</MudTh>

            </HeaderContent>
            <RowTemplate>

		             <MudTd DataLabel="Height"><MudLink Typo="Typo.caption" Underline="Underline.None" Href=@($"/blocksheight/{(long)context.Height}")>@context.Height</MudLink></MudTd>
                    <MudTd DataLabel="DbID"><MudText Typo="Typo.caption">@context.DbId</MudText></MudTd>
                    <MudTd DataLabel="Buyer ID"><MudText Typo="Typo.caption">@context.BuyerId</MudText></MudTd>
                    <MudTd DataLabel="Price"><MudText Typo="Typo.caption">@context.Price</MudText></MudTd>
                    <MudTd DataLabel="Latest"><MudText Typo="Typo.caption">@context.Latest</MudText></MudTd>
           
                  
               
        
        </RowTemplate>
        <PagerContent>
            <MudTablePager  />
        </PagerContent>
            </MudTable>
            </MudItem>
        }

   

    </MudTabPanel>
    </MudTabs>

    }
</MudContainer>




@code {

    private IAlias? AliasDet;
    private AliasCounts? counts;
    private IEnumerable<IAliasOffer>? AliasOffers;
    

    [Parameter]
    public string? Aliasid { get; set; }



    async Task OpenDialog(PropertyInfo info, object InputObject)
    {
        if(InputObject != null)
        {
            // var info = typeof(IAtState).GetProperty(nameof(IAtState.StateString));

            var parameters = new DialogParameters { ["propinfo"]=info, ["inputobject"] = InputObject };


            var result = await DialogService.Show<CodeDialog>(info.Name, parameters).Result;          

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
        await base.OnParametersSetAsync();

    }

    protected override async Task OnInitializedAsync()
    {
        if(!string.IsNullOrEmpty(Aliasid))
        {
            var alias = (long)UInt64.Parse(Aliasid);

            AliasDet = await SignumService.GetAlias(alias);
            counts = await SignumService.AliasCounts(alias);
            AliasOffers = await SignumService.GetAliasOffers(alias);

            

        }


    }



}
