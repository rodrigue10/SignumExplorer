{"version":3,"sources":["webpack:///../../../../../src/.internal/plugins/forceDirected/ForceDirectedLink.ts","webpack:///../../../../../src/.internal/plugins/forceDirected/ForceDirectedNode.ts","webpack:///../../../../../src/.internal/plugins/forceDirected/ForceDirectedSeries.ts","webpack:///../../../../../src/.internal/plugins/forceDirected/ForceDirectedTree.ts","webpack:///./plugins/forceDirected.js"],"names":["ForceDirectedLink_ForceDirectedLink","_super","ForceDirectedLink","_this","call","this","className","interfaceColors","InterfaceColorSet","fillOpacity","strokeOpacity","stroke","getFor","isMeasured","nonScalingStroke","interactionsEnabled","distance","strength","applyTheme","Object","tslib_es6","prototype","validate","source","target","path","Path","x","pixelX","y","pixelY","isHidden","isHiding","hide","show","defineProperty","_source","value","_disposers","push","events","on","invalidate","_target","_adapterO","isEnabled","apply","properties","setPropertyValue","getTooltipX","getPropertyValue","Percent","x1","getTooltipY","y1","Sprite","Registry","registeredClasses","ForceDirectedNode_ForceDirectedNode","ForceDirectedNode","applyOnClones","togglable","draggable","setStateOnChildren","isActive","expandAll","paddingRadius","linksWith","Dictionary","dataItem","component","nodeDragStarted","updateSimulation","outerCircle","createChild","Circle","shouldClone","strokeWidth","bgColor","fill","states","create","scale","outerActiveState","visible","circle","hiddenState","radius","addDisposer","updateLabelSize","label","Label","horizontalCenter","verticalCenter","textAlign","textValign","nonScaling","adapter","add","pixelRadius","text","dsRadius","defaultState","Type","parent","width","height","copyFrom","setActive","children","dataItemsInvalid","childrenInited","initNode","updateNodeList","each","child","node","parentLink","dispatchVisibility","restartSimulation","linkWith","link","getKey","uid","links","zIndex","nodeIndex","nodes","indexOf","childIndex","forceLinks","childLinks","setKey","unlinkWith","removeKey","Container","ForceDirectedSeries_ForceDirectedSeriesDataItem","ForceDirectedSeriesDataItem","hasChildren","List","duration","delay","fields","_visible","event_1","type","dispatchImmediately","toValue","event_2","values","setValue","_node","component_1","node_1","Disposer","removeValue","addSprite","itemsFocusable","role","focusable","once","ev","readerTitle","populateString","itemReaderText","undefined","hoverable","level","color","colors","getIndex","step","index","setProperty","hiddenInLegend","collapsed","fixed","handleFixed","createLegendMarker","marker","_legendDataItem","valueLabel","Series","ForceDirectedSeries_ForceDirectedSeries","ForceDirectedSeries","_tick","d3forceSimulation","src","maxRadius","minRadius","ColorSet","manyBodyStrength","centerStrength","showOnTick","updateRadiuses","dataItems","updateLinksAndNodes","w","utils_Math","innerWidth","h","innerHeight","force","alpha","restart","getMaxValue","max","cmax","validateDataItems","chart","__disabled","_dataDisposers","_maxValue","reset","Math","min","length","angle","xField","propertyFields","yField","dataContext","dataFields","processLinkWith","i","alphaDecay","pow","feedLegend","fx","Utils","fy","dragFixedNodes","di","_linkForce","_collisionForce","opacity","linkDatum","getDistance","getStrength","disabled","nodeDragEnded","alphaTarget","updateRadius","minSide","cursorOverStyle","Mouse","pointer","default","maxLevels","index_1","next","diColor","utils_Array","id","dataItemToConnect","getDataItemById","linkWithStrength","createDataItem","_nodes","createNode","_links","createLink","velocityDecay","RoundedRectangle","cornerRadius","legendDataItem","colorOrig","property","ForceDirectedTree_ForceDirectedTreeDataItem","ForceDirectedTreeDataItem","SerialChart","ForceDirectedTree_ForceDirectedTree","ForceDirectedTree","zoomDuration","zoomEasing","Ease","minZoomLevel","maxZoomLevel","seriesContainer","layout","mouseWheelBehavior","zoomStep","background","Color","zoomOutButton","ZoomOutButton","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","dx","interaction","Interaction","body","event","zoomable","svgPoint","point","htmlContainer","svgContainer","dragStart","dragStop","createSeries","legend","legendData_1","series","legendSettings","labelText","labels","template","itemLabelText","valueText","valueLabels","itemValueText","data","name","applyInternalDefaults","language","translate","getExporting","exporting","info","format","handleWheel","zoomLevel","shift","zoomToPoint","center","container","maxWidth","maxHeight","animate","to","zoomToDataItem","zoomOut","pixelWidth","pixelHeight","resizable","dragWhileResize","_backgroundZoomoutDisposer","dispose","_mouseWheelDisposer","chartContainer","wheelable","_zoomOutButton","button","window","am4plugins_forceDirected","forceDirected_namespaceObject"],"mappings":"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","file":"./plugins/forceDirected.js","sourcesContent":["/**\r\n * ForceDirectedLink module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { ForceDirectedNode } from \"./ForceDirectedNode\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedLink]].\r\n */\r\nexport interface IForceDirectedLinkProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Distance between centers of source and target nodes.\r\n\t */\r\n\tdistance?: number;\r\n\r\n\t/**\r\n\t * Strength of the \"traction\" between source and target nodes.\r\n\t */\r\n\tstrength?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedLink]].\r\n */\r\nexport interface IForceDirectedLinkEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IForceDirectedLinkAdapters extends ISpriteAdapters, IForceDirectedLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class that builds links between [[ForceDirectedNode]] elements.\r\n *\r\n * @see {@link IForceDirectedLinkEvents} for a list of available events\r\n * @see {@link IForceDirectedLinkAdapters} for a list of available Adapters\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedLink extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedLinkEvents;\r\n\r\n\t/**\r\n\t * Link source node\r\n\t */\r\n\tprotected _source: ForceDirectedNode;\r\n\r\n\t/**\r\n\t * Link parent node\r\n\t */\r\n\tprotected _target: ForceDirectedNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.strokeOpacity = 0.5;\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.interactionsEnabled = false;\r\n\r\n\t\tthis.distance = 1.5;\r\n\t\tthis.strength = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet source = this.source;\r\n\t\tlet target = this.target;\r\n\t\tif (source && target) {\r\n\t\t\tthis.path = $path.moveTo({ x: source.pixelX, y: source.pixelY }) + $path.lineTo({ x: target.pixelX, y: target.pixelY });\r\n\r\n\t\t\tif (source.isHidden || target.isHidden || source.isHiding || target.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.show();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Source node - a node link starts from.\r\n\t * \r\n\t * @param  value  Source node\r\n\t */\r\n\tpublic set source(value: ForceDirectedNode) {\r\n\t\tif (value) {\r\n\t\t\tthis._source = value;\r\n\t\t\tthis._disposers.push(value.events.on(\"positionchanged\", this.invalidate, this, false));\r\n\t\t\tthis._disposers.push(value.events.on(\"validated\", this.invalidate, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Source node\r\n\t */\r\n\tpublic get source(): ForceDirectedNode {\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\t/**\r\n\t * Target node - a node link ends at.\r\n\t * \r\n\t * @param  value  Target node\r\n\t */\r\n\tpublic set target(value: ForceDirectedNode) {\r\n\t\tif (value) {\r\n\t\t\tthis._target = value;\r\n\t\t\tthis._disposers.push(value.events.on(\"positionchanged\", this.invalidate, this, false));\r\n\t\t\tthis._disposers.push(value.events.on(\"validated\", this.invalidate, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target node\r\n\t */\r\n\tpublic get target(): ForceDirectedNode {\r\n\t\treturn this._target;\r\n\t}\r\n\r\n\t/**\r\n\t * Distance between centers of source and target nodes.\r\n\t *\r\n\t * This is relative to the radii to sum of both source and target nodes.\r\n\t *\r\n\t * E.g. if this would be set to `1` both nodes would be touching each other.\r\n\t *\r\n\t * @default 1.5\r\n\t * @param  value  Distance\r\n\t */\r\n\tpublic set distance(value: number) {\r\n\t\tthis.setPropertyValue(\"distance\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance\r\n\t */\r\n\tpublic get distance(): number {\r\n\t\tif (this._adapterO) {\r\n\t\t\tif (this._adapterO.isEnabled(\"distance\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"distance\", this.properties.distance);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.properties.distance;\r\n\t}\r\n\r\n\t/**\r\n\t * Relative \"strength\" of the traction between linked nodes.\r\n\t *\r\n\t * Available values: 0 to XX.\r\n\t *\r\n\t * The bigger the number, the more rigid the link and the less it will\r\n\t * stretch when node is dragged.\r\n\t *\r\n\t * Carefully with very big numbers: nodes and links might start behaving\r\n\t * quite \"nerviously\".\r\n\t *\r\n\t * @default 1\r\n\t * @param  value  Strength\r\n\t */\r\n\tpublic set strength(value: number) {\r\n\t\tthis.setPropertyValue(\"strength\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Strength\r\n\t */\r\n\tpublic get strength(): number {\r\n\t\tif (this._adapterO) {\r\n\t\t\tif (this._adapterO.isEnabled(\"strength\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"strength\", this.properties.strength);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.properties.strength;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet x = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!(x instanceof Percent)) {\r\n\t\t\tx = percent(50);\r\n\t\t}\r\n\t\tif (x instanceof Percent) {\r\n\t\t\tlet source = this.source;\r\n\t\t\tlet target = this.target;\r\n\t\t\tif (source && target) {\r\n\t\t\t\tlet x1 = source.pixelX;\r\n\t\t\t\tlet x2 = target.pixelX;\r\n\t\t\t\treturn x1 + (x2 - x1) * x.value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet y = this.getPropertyValue(\"tooltipY\");\r\n\t\tif (!(y instanceof Percent)) {\r\n\t\t\ty = percent(50);\r\n\t\t}\r\n\t\tif (y instanceof Percent) {\r\n\t\t\tlet source = this.source;\r\n\t\t\tlet target = this.target;\r\n\t\t\tif (source && target) {\r\n\t\t\t\tlet y1 = source.pixelY;\r\n\t\t\t\tlet y2 = target.pixelY;\r\n\t\t\t\treturn y1 + (y2 - y1) * y.value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedLink\"] = ForceDirectedLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/plugins/forceDirected/ForceDirectedLink.ts","/**\r\n * Module that defines everything related to building ForceDirectedNodes.\r\n * \r\n * It is a container which has ForceDirectedNode element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { ForceDirectedSeriesDataItem } from \"./ForceDirectedSeries\";\r\nimport { ForceDirectedLink } from \"./ForceDirectedLink\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedNode]].\r\n */\r\nexport interface IForceDirectedNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * If set to `true` (default) toggling a node on will automatically expand\r\n\t * all nodes across the whole tree (all levels) of its descendants.\r\n\t *\r\n\t * Setting to `false` will only expand immediate children (one level).\r\n\t */\r\n\texpandAll?: boolean;\r\n\r\n\t/**\r\n\t * Padding of the nodes, in pixels.\r\n\t */\r\n\tpaddingRadius?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedNode]].\r\n */\r\nexport interface IForceDirectedNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IForceDirectedNodeAdapters extends IContainerAdapters, IForceDirectedNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates [[ForceDirectedNode]] elements (circles).\r\n *\r\n * @see {@link IForceDirectedNodeEvents} for a list of available events\r\n * @see {@link IForceDirectedNodeAdapters} for a list of available Adapters\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedNode extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedNodeEvents;\r\n\r\n\t/**\r\n\t * A node's [[Circle]] element.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * A [[Circle]] element for node's outline. This outline is used on nodes\r\n\t * that have children.\r\n\t */\r\n\tpublic outerCircle: Circle;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: ForceDirectedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Node's [[Label]] element.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * A list of other [[ForceDirectedNode]] elements this node is linked with\r\n\t * using `linkWith`.\r\n\t *\r\n\t * @since 4.4.8\r\n\t */\r\n\tpublic linksWith: Dictionary<string, ForceDirectedLink>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedNode\";\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\t\tthis.togglable = true;\r\n\t\tthis.draggable = true;\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.isActive = false;\r\n\t\tthis.expandAll = true;\r\n\t\tthis.paddingRadius = 0;\r\n\r\n\t\tthis.linksWith = new Dictionary<string, ForceDirectedLink>()\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.linksWith));\r\n\r\n\t\tthis.events.on(\"dragstart\", () => {\r\n\t\t\tif (this.dataItem.component) {\r\n\t\t\t\tthis.dataItem.component.nodeDragStarted();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tthis.events.on(\"drag\", () => {\r\n\t\t\tthis.updateSimulation();\r\n\t\t}, this, false);\r\n\r\n\t\tlet outerCircle = this.createChild(Circle);\r\n\t\touterCircle.shouldClone = false;\r\n\t\touterCircle.strokeWidth = 2;\r\n\t\touterCircle.nonScalingStroke = true;\r\n\r\n\t\tlet bgColor = new InterfaceColorSet().getFor(\"background\");\r\n\t\touterCircle.fill = bgColor;\r\n\t\tthis.outerCircle = outerCircle;\r\n\r\n\t\tlet hoverState = outerCircle.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.1;\r\n\r\n\t\tlet outerActiveState = outerCircle.states.create(\"active\");\r\n\t\touterActiveState.properties.scale = 1.1;\r\n\t\touterActiveState.properties.visible = true;\r\n\r\n\t\tlet activeHoverState = outerCircle.states.create(\"hoverActive\");\r\n\t\tactiveHoverState.properties.scale = 1;\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\r\n\t\tlet activeState = circle.states.create(\"active\");\r\n\t\tactiveState.properties.visible = true;\r\n\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.interactionsEnabled = false;\r\n\t\tcircle.hiddenState.properties.radius = 0.01;\r\n\t\tcircle.events.on(\"validated\", this.updateSimulation, this, false)\r\n\t\tcircle.hiddenState.properties.visible = true;\r\n\r\n\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.addDisposer(circle.events.on(\"validated\", this.updateLabelSize, this, false));\r\n\r\n\t\tthis._disposers.push(this.circle);\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.fill = bgColor;\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.interactionsEnabled = false;\r\n\t\tlabel.textAlign = \"middle\";\r\n\t\tlabel.textValign = \"middle\";\r\n\t\tlabel.nonScaling = true;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (y, target) => {\r\n\t\t\treturn -target.circle.pixelRadius;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateLabelSize() {\r\n\t\tif (this.label.text) {\r\n\t\t\tlet circle = this.circle;\r\n\t\t\tlet radius = circle.pixelRadius;\r\n\r\n\t\t\tlet ds = circle.defaultState;\r\n\t\t\tlet dsRadius = ds.properties.radius\r\n\t\t\tif ($type.isNumber(dsRadius)) {\r\n\t\t\t\tradius = dsRadius;\r\n\t\t\t}\r\n\r\n\t\t\tlet scale = 1;\r\n\r\n\t\t\tif (this.parent && this.parent.parent) {\r\n\t\t\t\tscale = this.parent.parent.scale;\r\n\t\t\t}\r\n\r\n\t\t\tthis.label.width = 2 * radius * scale;\r\n\t\t\tthis.label.height = 2 * radius * scale;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ForceDirectedNode]].\r\n\t *\r\n\t * @param source Source ForceDirectedNode\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.circle) {\r\n\t\t\tthis.circle.copyFrom(source.circle);\r\n\t\t}\r\n\t\tif (this.label) {\r\n\t\t\tthis.label.copyFrom(source.label);\r\n\t\t}\r\n\t\tif (this.outerCircle) {\r\n\t\t\tthis.outerCircle.copyFrom(source.outerCircle);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets node as \"active\" (expanded).\r\n\t * \r\n\t * @ignore\r\n\t * @param  value  Active or not?\r\n\t */\r\n\tpublic setActive(value: boolean) {\r\n\t\tsuper.setActive(value);\r\n\r\n\t\tlet dataItem = this.dataItem;\r\n\r\n\t\tif (dataItem) {\r\n\r\n\r\n\t\t\tlet children = dataItem.children;\r\n\t\t\tlet component = dataItem.component;\r\n\t\t\tif (!component.dataItemsInvalid) {\r\n\t\t\t\tif (value && children && !dataItem.childrenInited) {\r\n\t\t\t\t\tcomponent.initNode(dataItem);\r\n\t\t\t\t\tcomponent.updateNodeList();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\t\tif (children) {\r\n\t\t\t\t\t\tchildren.each((child) => {\r\n\t\t\t\t\t\t\tchild.node.show();\r\n\t\t\t\t\t\t\tchild.node.interactionsEnabled = true;\r\n\t\t\t\t\t\t\tif (child.parentLink) {\r\n\t\t\t\t\t\t\t\tchild.parentLink.show();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.expandAll) {\r\n\t\t\t\t\t\t\t\tchild.node.isActive = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tchild.node.isActive = false;\r\n\t\t\t\t\t\t\t\t//child.node.hide(0)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.dispatchVisibility(true);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (children) {\r\n\t\t\t\t\t\tchildren.each((child) => {\r\n\t\t\t\t\t\t\tif (child.parentLink) {\r\n\t\t\t\t\t\t\t\tchild.parentLink.hide();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tchild.node.isActive = false;\r\n\t\t\t\t\t\t\tchild.node.interactionsEnabled = false;\r\n\r\n\t\t\t\t\t\t\tchild.node.hide();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.dispatchVisibility(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateSimulation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tprotected updateSimulation() {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\tif (dataItem && dataItem.component) {\r\n\t\t\tdataItem.component.restartSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` (default) toggling a node on will automatically expand\r\n\t * all nodes across the whole tree (all levels) of its descendants.\r\n\t *\r\n\t * Setting to `false` will only expand immediate children (one level).\r\n\t * \r\n\t * @default true\r\n\t * @since 4.4.8\r\n\t * @param  value  Expand all?\r\n\t */\r\n\tpublic set expandAll(value: boolean) {\r\n\t\tthis.setPropertyValue(\"expandAll\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Expand all?\r\n\t */\r\n\tpublic get expandAll(): boolean {\r\n\t\treturn this.getPropertyValue(\"expandAll\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new link between two nodes.\r\n\t *\r\n\t * Use this method to dynamically add links without requiring to revalidate\r\n\t * whole of the data.\r\n\t * \r\n\t * @since 4.4.8\r\n\t * @param   node      Target node\r\n\t * @param   strength  Link strength\r\n\t * @return            New link\r\n\t */\r\n\tpublic linkWith(node: ForceDirectedNode, strength?: number): ForceDirectedLink {\r\n\t\tlet link = this.linksWith.getKey(node.uid);\r\n\t\tif (!link) {\r\n\t\t\tlink = node.linksWith.getKey(this.uid);\r\n\t\t}\r\n\r\n\t\tif (!link) {\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tlet component = dataItem.component;\r\n\t\t\tlink = component.links.create();\r\n\t\t\tlink.parent = component;\r\n\t\t\tlink.zIndex = -1;\r\n\t\t\tlink.source = this;\r\n\t\t\tlink.target = node;\r\n\t\t\tlink.stroke = dataItem.node.fill;\r\n\r\n\t\t\tlink.dataItem = node.dataItem;\r\n\r\n\t\t\tif ($type.isNumber(strength)) {\r\n\t\t\t\tlink.strength = strength;\r\n\t\t\t}\r\n\r\n\t\t\tlet nodeIndex = component.nodes.indexOf(dataItem.node);\r\n\t\t\tlet childIndex = component.nodes.indexOf(node);\r\n\r\n\t\t\tcomponent.forceLinks.push({ source: nodeIndex, target: childIndex });\r\n\t\t\tcomponent.updateNodeList();\r\n\r\n\t\t\tdataItem.childLinks.push(link);\r\n\r\n\t\t\tthis.linksWith.setKey(node.uid, link);\r\n\t\t}\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a link between two nodes.\r\n\t * \r\n\t * @since 4.4.8\r\n\t * @param  node  Target node\r\n\t */\r\n\tpublic unlinkWith(node: ForceDirectedNode) {\r\n\t\tthis.linksWith.removeKey(node.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Padding of the nodes, in pixels.\r\n\t * \r\n\t * @since 4.6.7\r\n\t * @default 0\r\n\t * @param  value  padding radius\r\n\t */\r\n\tpublic set paddingRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"paddingRadius\", value);\r\n\t}\r\n\r\n\t/** \r\n\t * @return Padding radius\r\n\t */\r\n\tpublic get paddingRadius(): number {\r\n\t\treturn this.getPropertyValue(\"paddingRadius\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedNode\"] = ForceDirectedNode;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/plugins/forceDirected/ForceDirectedNode.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Series, SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesAdapters, ISeriesEvents } from \"../../charts/series/Series\";\r\nimport { ForceDirectedTree, ForceDirectedTreeDataItem } from \"./ForceDirectedTree\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ListTemplate, ListDisposer, List } from \"../../core/utils/List\";\r\nimport { ForceDirectedNode } from \"./ForceDirectedNode\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { ForceDirectedLink } from \"./ForceDirectedLink\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport * as d3force from \"d3-force\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { AMEvent } from \"../../core/utils/EventDispatcher\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ForceDirectedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n * @since 4.3.8\r\n */\r\nexport class ForceDirectedSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ForceDirectedSeries;\r\n\r\n\t/**\r\n\t * A reference to a component of a data item.\r\n\t */\r\n\tpublic component: ForceDirectedSeries;\r\n\r\n\t/**\r\n\t * A type of node used for this series.\r\n\t */\r\n\tpublic _node: ForceDirectedNode;\r\n\r\n\t/**\r\n\t * A list of [[ForceDirectedLink]] elements of links  to node's children.\r\n\t *\r\n\t * This list does not include a link to node's parent, which is available\r\n\t * through `parentLink`.\r\n\t */\r\n\tpublic childLinks: List<ForceDirectedLink>;\r\n\r\n\t/**\r\n\t * A [[ForceDirectedLink]] to node's parent.\r\n\t */\r\n\tpublic parentLink: ForceDirectedLink;\r\n\r\n\t/**\r\n\t * A Legend's data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Have all children already been initialized?\r\n\t */\r\n\tpublic childrenInited: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedSeriesDataItem\";\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.childLinks = new List<ForceDirectedLink>();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis._visible = true;\r\n\r\n\t\tif (this.node) {\r\n\t\t\tthis.node.isActive = true;\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dispatchVisibility(visible: boolean) {\r\n\t\tif (this.events.isEnabled(\"visibilitychanged\")) {\r\n\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"visibilitychanged\"] = {\r\n\t\t\t\ttype: \"visibilitychanged\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tvisible: visible\r\n\t\t\t};\r\n\r\n\t\t\tthis.events.dispatchImmediately(\"visibilitychanged\", event);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis._visible = false;\r\n\r\n\t\tif (this.events.isEnabled(\"visibilitychanged\")) {\r\n\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"visibilitychanged\"] = {\r\n\t\t\t\ttype: \"visibilitychanged\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tvisible: false\r\n\t\t\t};\r\n\r\n\t\t\tthis.events.dispatchImmediately(\"visibilitychanged\", event);\r\n\t\t}\r\n\r\n\t\tif (this.node) {\r\n\t\t\tthis.node.isActive = false;\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = this.values.value.value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t\tthis.children.each((child) => {\r\n\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * An element, related to this data item. (node)\r\n\t *\r\n\t * @readonly\r\n\t * @return node element\r\n\t */\r\n\tpublic get node(): ForceDirectedNode {\r\n\t\tif (!this._node) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet node = component.nodes.create();\r\n\t\t\tnode.draggable = true;\r\n\t\t\tthis._node = node;\r\n\r\n\t\t\tthis._disposers.push(node);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tcomponent.nodes.removeValue(node);\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(node);\r\n\t\t\tnode.visible = this.visible;\r\n\t\t\tnode.hiddenState.properties.visible = true;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (component.itemsFocusable()) {\r\n\t\t\t\tthis.component.role = \"menu\";\r\n\t\t\t\tnode.role = \"menuitem\";\r\n\t\t\t\tnode.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.component.role = \"list\";\r\n\t\t\t\tnode.role = \"listitem\";\r\n\t\t\t\tnode.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (node.focusable) {\r\n\t\t\t\tnode.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\tnode.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tnode.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\tnode.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t\tif (node.hoverable) {\r\n\t\t\t\tnode.events.once(\"over\", (ev) => {\r\n\t\t\t\t\tnode.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tnode.events.once(\"out\", (ev) => {\r\n\t\t\t\t\tnode.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._node;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the series hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node.\r\n\t *\r\n\t * @since 4.9.0\r\n\t * @return Percent\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  : Color | LinearGradient | RadialGradient | Pattern\r\n\t */\r\n\tpublic set color(value: Color | LinearGradient | RadialGradient | Pattern) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color | LinearGradient | RadialGradient | Pattern {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of id's of other nodes outside of the child/parent tree to link\r\n\t * with.\r\n\t *\r\n\t * @param  value  Link list\r\n\t */\r\n\tpublic set linkWith(value: string[]) {\r\n\t\tthis.setProperty(\"linkWith\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Link list\r\n\t */\r\n\tpublic get linkWith(): string[] {\r\n\t\treturn this.properties.linkWith;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (node) be hidden in legend?\r\n\t *\r\n\t * @param value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether node should start off as collapsed.\r\n\t *\r\n\t * This can be used to specify whether node should start off as collapsed\r\n\t * via data.\r\n\t *\r\n\t * To toggle actual node, use its `isActive` property instead.\r\n\t *\r\n\t * @param  value  Collapsed?\r\n\t */\r\n\tpublic set collapsed(value: boolean) {\r\n\t\tthis.setProperty(\"collapsed\", value);\r\n\t\tthis.node.isActive = !value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Collapsed?\r\n\t */\r\n\tpublic get collapsed(): boolean {\r\n\t\treturn this.properties.collapsed;\r\n\t}\r\n\r\n\t/**\r\n\t * Is this node fixed (immovable)?\r\n\t *\r\n\t * @since 4.6.2\r\n\t * @param  value  Fixed?\r\n\t */\r\n\tpublic set fixed(value: boolean) {\r\n\t\tthis.setProperty(\"fixed\", value);\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.handleFixed(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fixed?\r\n\t */\r\n\tpublic get fixed(): boolean {\r\n\t\treturn this.properties.fixed;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<ForceDirectedSeriesDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<ForceDirectedSeriesDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t\tif (!this.node.isActive) {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ForceDirectedSeries]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field tha holds an array of ids that node should link with\r\n\t * besides of it's own children or parent.\r\n\t */\r\n\tlinkWith?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * A name of the field that holds boolean flag whether node should start\r\n\t * as collapsed. (nodes start as fully expanded by default)\r\n\t */\r\n\tcollapsed?: string;\r\n\r\n\t/**\r\n\t * name of the field that holds boolean flag indicating whether this node\r\n\t * is \"fixed\" (immobavle).\r\n\t *\r\n\t * @since 4.6.2\r\n\t */\r\n\tfixed?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedSeries]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Smallest possible radius in pixels of the node circle.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tminRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Biggest possible radius in pixels of the node circle.\r\n\t *\r\n\t * @default 70\r\n\t */\r\n\tmaxRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * A color set to be used for coloring nodes.\r\n\t *\r\n\t * Each new top level will be assigned a new color from this list.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Number of levels to display initially.\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * A relative strength with which nodes push or attract each other.\r\n\t */\r\n\tmanyBodyStrength?: number;\r\n\r\n\t/**\r\n\t * A relative strength with which nodes are pushed away or attracted to\r\n\t * center of the chart.\r\n\t */\r\n\tcenterStrength?: number;\r\n\r\n\t/**\r\n\t * Relative attraction strength between the nodes connected with `linkWith`.\r\n\t *\r\n\t * @since 4.4.8\r\n\t */\r\n\tlinkWithStrength?: number;\r\n\r\n\t/**\r\n\t * Specifies if user can drag fixed nodes\r\n\t *\r\n\t * @since 4.9.0\r\n\t */\r\n\tdragFixedNodes?: boolean;\r\n\r\n\t/**\r\n\t * The bigger the number the more slowly the nodes will move. Think of it as\r\n\t * friction.\r\n\t * \r\n\t * @default 0.4\r\n\t * @since 4.9.2\r\n\t */\r\n\tvelocityDecay?: number;\r\n\r\n\t/**\r\n\t * Renders series hidden until Xth tick.\r\n\t *\r\n\t * @default 10\r\n\t * @since 4.10.17\r\n\t */\r\n\tshowOnTick?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedSeries]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedSeriesAdapters extends ISeriesAdapters, IForceDirectedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a [[ForceDirectedTree]] chart.\r\n *\r\n * @see {@link IForceDirectedSeriesEvents} for a list of available Events\r\n * @see {@link IForceDirectedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/ForceDirectedTree/} For more information\r\n * @todo Example\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedSeries extends Series {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _node: ForceDirectedNode;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _nodes: ListTemplate<this[\"_node\"]>;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _link: ForceDirectedLink;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IForceDirectedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ForceDirectedSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: ForceDirectedTree;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: ForceDirectedTreeDataItem;\r\n\r\n\t/**\r\n\t * A reference to the `d3.Simulation` instance for fine-grained configuration\r\n\t * of node gravitational dynamics.\r\n\t *\r\n\t * @see {@link https://github.com/d3/d3-force#simulation} For more info\r\n\t */\r\n\tpublic d3forceSimulation: d3force.Simulation<{}, d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>>;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _maxValue: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic forceLinks: d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>[];\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _linkForce: d3force.ForceLink<d3force.SimulationNodeDatum, d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>>;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _collisionForce: d3force.ForceCollide<d3force.SimulationNodeDatum>;\r\n\r\n\r\n\tprotected _tick = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedSeries\";\r\n\r\n\t\tthis.d3forceSimulation = d3force.forceSimulation();\r\n\r\n\t\tthis.maxRadius = percent(8);\r\n\t\tthis.minRadius = percent(1);\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 2;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.manyBodyStrength = -15;\r\n\t\tthis.centerStrength = 0.8;\r\n\r\n\t\tthis.showOnTick = 10;\r\n\r\n\t\tthis.setPropertyValue(\"dragFixedNodes\", false);\r\n\t\tthis.setPropertyValue(\"velocityDecay\", 0.4);\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.updateRadiuses(this.dataItems);\r\n\t\t\tthis.updateLinksAndNodes();\r\n\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tthis.handleFixed(dataItem);\r\n\t\t\t})\r\n\r\n\t\t\tlet d3forceSimulation = this.d3forceSimulation;\r\n\r\n\t\t\tlet w = $math.max($math.max(50, this.innerWidth), this.innerWidth);\r\n\t\t\tlet h = $math.max($math.max(50, this.innerHeight), this.innerHeight);\r\n\r\n\t\t\tif (d3forceSimulation) {\r\n\t\t\t\td3forceSimulation.force(\"x\", d3force.forceX().x(w / 2).strength(this.centerStrength * 100 / w));\r\n\t\t\t\td3forceSimulation.force(\"y\", d3force.forceY().y(h / 2).strength(this.centerStrength * 100 / h));\r\n\t\t\t\tif (d3forceSimulation.alpha() < 0.4) {\r\n\t\t\t\t\td3forceSimulation.alpha(0.4);\r\n\t\t\t\t\td3forceSimulation.restart();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maximum value from all supplied data items.\r\n\t *\r\n\t * @ignore\r\n\t * @param   dataItems  List of data items\r\n\t * @param   max        Default max\r\n\t * @return             Max\r\n\t */\r\n\tprotected getMaxValue(dataItems: OrderedListTemplate<ForceDirectedSeriesDataItem>, max: number): number {\r\n\t\tdataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.value > max) {\r\n\t\t\t\tmax = dataItem.value;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.children) {\r\n\t\t\t\tlet cmax = this.getMaxValue(dataItem.children, max);\r\n\t\t\t\tif (cmax > max) {\r\n\t\t\t\t\tmax = cmax;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\r\n\t\tif (this.chart.__disabled) {\r\n\t\t\tsuper.validateDataItems();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._dataDisposers.push(new ListDisposer(this.links));\r\n\r\n\t\tthis._maxValue = this.getMaxValue(this.dataItems, 0);\r\n\r\n\t\tthis.forceLinks = [];\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\tlet radius = Math.min(this.innerHeight / 3, this.innerWidth / 3);\r\n\r\n\t\tif (this.dataItems.length <= 1) {\r\n\t\t\tradius = 0;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\r\n\t\t\tlet angle = index / this.dataItems.length * 360;\r\n\r\n\t\t\tlet node = dataItem.node;\r\n\r\n\t\t\tlet xField = node.propertyFields.x;\r\n\t\t\tlet yField = node.propertyFields.y;\r\n\r\n\t\t\tif (xField && $type.hasValue((<any>dataItem.dataContext)[xField])) {\r\n\t\t\t\tnode.x = (<any>dataItem.dataContext)[xField];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode.x = this.innerWidth / 2 + radius * $math.cos(angle);\r\n\t\t\t}\r\n\t\t\tif (yField && $type.hasValue((<any>dataItem.dataContext)[yField])) {\r\n\t\t\t\tnode.y = (<any>dataItem.dataContext)[yField];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode.y = this.innerHeight / 2 + radius * $math.sin(angle);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.node.fill = dataItem.color;\r\n\t\t\tdataItem.node.stroke = dataItem.color;\r\n\r\n\t\t\tindex++;\r\n\r\n\t\t\tthis.initNode(dataItem);\r\n\t\t})\r\n\r\n\t\tif (this.dataFields.linkWith) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tthis.processLinkWith(dataItem);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet d3forceSimulation = this.d3forceSimulation;\r\n\r\n\t\td3forceSimulation.on(\"tick\", () => {\r\n\t\t\tthis.updateLinksAndNodes();\r\n\t\t});\r\n\r\n\t\t// helps to avoid initial scatter\r\n\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\t//d3forceSimulation.tick();\r\n\t\t}\r\n\t\td3forceSimulation.alphaDecay(1 - Math.pow(0.001, 1 / 600));\r\n\r\n\t\tthis.chart.feedLegend();\r\n\r\n\t\tsuper.validateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleFixed(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet node = dataItem.node;\r\n\r\n\t\tlet xField = node.propertyFields.x;\r\n\t\tlet yField = node.propertyFields.y;\r\n\r\n\t\tif (xField && $type.hasValue((<any>dataItem.dataContext)[xField])) {\r\n\t\t\tnode.x = (<any>dataItem.dataContext)[xField];\r\n\t\t}\r\n\r\n\t\tif (yField && $type.hasValue((<any>dataItem.dataContext)[yField])) {\r\n\t\t\tnode.y = (<any>dataItem.dataContext)[yField];\r\n\t\t}\r\n\r\n\t\tif (dataItem.fixed) {\r\n\r\n\t\t\tif (node.x instanceof Percent) {\r\n\t\t\t\t(<any>node).fx = $utils.relativeToValue(node.x, this.innerWidth);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>node).fx = node.x;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.y instanceof Percent) {\r\n\t\t\t\t(<any>node).fy = $utils.relativeToValue(node.y, this.innerHeight);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>node).fy = node.y;\r\n\t\t\t}\r\n\r\n\t\t\tnode.draggable = this.dragFixedNodes;\r\n\r\n\t\t\tnode.validate(); // for links to redraw\r\n\t\t}\r\n\t\telse {\r\n\t\t\t(<any>node).fx = undefined;\r\n\t\t\t(<any>node).fy = undefined;\r\n\t\t\tnode.draggable = true;\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tdataItem.children.each((di) => {\r\n\t\t\t\tthis.handleFixed(di)\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tpublic updateNodeList() {\r\n\t\tlet d3forceSimulation = this.d3forceSimulation;\r\n\t\td3forceSimulation.nodes(this.nodes.values);\r\n\t\tthis._linkForce = d3force.forceLink(this.forceLinks);\r\n\t\td3forceSimulation.force(\"link\", this._linkForce);\r\n\t\tthis._collisionForce = d3force.forceCollide();\r\n\t\td3forceSimulation.force(\"collision\", this._collisionForce);\r\n\r\n\t\tlet w = $math.max(50, this.innerWidth);\r\n\t\tlet h = $math.max(50, this.innerHeight);\r\n\r\n\t\td3forceSimulation.force(\"x\", d3force.forceX().x(w / 2).strength(this.centerStrength * 100 / w));\r\n\t\td3forceSimulation.force(\"y\", d3force.forceY().y(h / 2).strength(this.centerStrength * 100 / h));\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tpublic updateLinksAndNodes() {\r\n\t\tif (this._tick < this.showOnTick) {\r\n\t\t\tthis._tick++;\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\r\n\t\telse if (this._tick == this.showOnTick) {\r\n\t\t\tthis.opacity = 1;\r\n\t\t\tthis._tick++;\r\n\t\t}\r\n\r\n\t\tif (this._linkForce) {\r\n\t\t\tthis._linkForce.distance((linkDatum) => {\r\n\t\t\t\treturn this.getDistance(linkDatum)\r\n\t\t\t});\r\n\t\t\tthis._linkForce.strength((linkDatum) => {\r\n\t\t\t\treturn this.getStrength(linkDatum)\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this._collisionForce) {\r\n\t\t\tthis._collisionForce.radius(function(node) {\r\n\t\t\t\tif (node instanceof ForceDirectedNode) {\r\n\t\t\t\t\tlet radius = node.circle.pixelRadius;\r\n\t\t\t\t\tif (!node.outerCircle.__disabled && !node.outerCircle.disabled && node.outerCircle.visible) {\r\n\t\t\t\t\t\tradius = (radius + 3) * node.outerCircle.scale;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn radius + node.paddingRadius;\r\n\t\t\t\t}\r\n\t\t\t\treturn 1;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.d3forceSimulation.force(\"manybody\", d3force.forceManyBody().strength((node) => {\r\n\t\t\tif (node instanceof ForceDirectedNode) {\r\n\t\t\t\treturn node.circle.pixelRadius * this.manyBodyStrength;\r\n\t\t\t}\r\n\t\t\treturn this.manyBodyStrength;\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tprotected getDistance(linkDatum: d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>) {\r\n\t\tlet source: ForceDirectedNode = <ForceDirectedNode>linkDatum.source;\r\n\t\tlet target: ForceDirectedNode = <ForceDirectedNode>linkDatum.target;\r\n\r\n\t\tlet distance = 0;\r\n\t\tif (target.dataItem && source.dataItem) {\r\n\r\n\r\n\t\t\tlet link = source.linksWith.getKey(target.uid);\r\n\r\n\t\t\tif (link) {\r\n\t\t\t\tdistance = link.distance;\r\n\t\t\t}\r\n\r\n\t\t\tif (!source.isActive) {\r\n\t\t\t\tdistance = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (target.isHidden) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn (distance * (source.circle.pixelRadius + target.circle.pixelRadius));\r\n\t\t}\r\n\r\n\t\treturn distance;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tprotected getStrength(linkDatum: d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>) {\r\n\t\tlet source: ForceDirectedNode = <ForceDirectedNode>linkDatum.source;\r\n\t\tlet target: ForceDirectedNode = <ForceDirectedNode>linkDatum.target;\r\n\r\n\t\tlet strength = 0;\r\n\r\n\t\tlet link = source.linksWith.getKey(target.uid);\r\n\t\tif (link) {\r\n\t\t\tstrength = link.strength;\r\n\t\t}\r\n\r\n\t\tif (target.isHidden) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn strength;\r\n\t}\r\n\r\n\t/**\r\n\t * Handler for drag end event.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic nodeDragEnded(): void {\r\n\t\tthis.d3forceSimulation.alphaTarget(0);\r\n\t}\r\n\t/**\r\n\t * Handler for drag start event.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic nodeDragStarted(): void {\r\n\t\tthis.d3forceSimulation.alpha(0.1);\r\n\t\tthis.d3forceSimulation.restart();\r\n\t}\r\n\r\n\t/**\r\n\t * Resets positions of whole tree.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic restartSimulation(): void {\r\n\t\tif (this.d3forceSimulation.alpha() <= 0.3) {\r\n\t\t\tthis.d3forceSimulation.alpha(0.3);\r\n\t\t\tthis.d3forceSimulation.restart();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateRadiuses(dataItems: OrderedListTemplate<ForceDirectedSeriesDataItem>) {\r\n\t\tdataItems.each((dataItem) => {\r\n\t\t\tthis.updateRadius(dataItem);\r\n\t\t\tif (dataItem.childrenInited) {\r\n\t\t\t\tthis.updateRadiuses(dataItem.children);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateRadius(dataItem: ForceDirectedSeriesDataItem) {\r\n\t\tlet node = dataItem.node;\r\n\t\tlet minSide = (this.innerWidth + this.innerHeight) / 2;\r\n\t\tlet minRadius = $utils.relativeToValue(this.minRadius, minSide)\r\n\t\tlet maxRadius = $utils.relativeToValue(this.maxRadius, minSide)\r\n\r\n\t\tlet radius = minRadius + dataItem.value / this._maxValue * (maxRadius - minRadius);\r\n\r\n\t\tif (!$type.isNumber(radius)) {\r\n\t\t\tradius = minRadius;\r\n\t\t}\r\n\r\n\t\t//if(!node.circle.isHidden){\r\n\t\tnode.circle.radius = radius;\r\n\t\t//}\r\n\t\tnode.outerCircle.radius = radius + 3;\r\n\r\n\t\tnode.circle.states.getKey(\"active\").properties.radius = radius;\r\n\t\tnode.circle.defaultState.properties.radius = radius;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes node.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic initNode(dataItem: ForceDirectedSeriesDataItem): void {\r\n\r\n\t\tlet node = dataItem.node;\r\n\t\tnode.parent = this;\r\n\t\tthis.updateRadius(dataItem);\r\n\r\n\t\t//let nodeIndex = this.nodes.indexOf(dataItem.node);\r\n\r\n\t\tif (!dataItem.children || dataItem.children.length == 0) {\r\n\t\t\tnode.outerCircle.disabled = true;\r\n\t\t\tnode.circle.interactionsEnabled = true;\r\n\t\t\tnode.cursorOverStyle = MouseCursorStyle.default;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnode.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t}\r\n\r\n\r\n\t\tif (this.dataItemsInvalid && (dataItem.level >= this.maxLevels - 1 || dataItem.collapsed)) {\r\n\t\t\tnode.isActive = false;\r\n\t\t\tthis.updateNodeList();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!node.isActive) {\r\n\t\t\tnode.hide(0);\r\n\t\t}\r\n\r\n\t\tthis.handleFixed(dataItem);\r\n\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet index = 0;\r\n\t\t\tdataItem.childrenInited = true;\r\n\r\n\t\t\tif (this.dataItems.length == 1 && dataItem.level == 0) {\r\n\t\t\t\tthis.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.children.each((child) => {\r\n\t\t\t\t/*\r\n\t\t\t\tlet link = this.links.create();\r\n\t\t\t\tlink.parent = this;\r\n\t\t\t\tlink.zIndex = -1;\r\n\t\t\t\tdataItem.childLinks.push(link);\r\n\t\t\t\tlink.source = dataItem.node;\r\n\t\t\t\tlet childIndex = this.nodes.indexOf(child.node);\r\n\t\t\t\tlink.target = child.node;\r\n\t\t\t\tchild.parentLink = link;\r\n\r\n\t\t\t\tthis._forceLinks.push({ source: nodeIndex, target: childIndex });\r\n\t\t\t\t*/\r\n\r\n\t\t\t\tlet link = node.linkWith(child.node);\r\n\t\t\t\tchild.parentLink = link;\r\n\r\n\t\t\t\tlet radius = 2 * node.circle.pixelRadius + child.node.circle.pixelRadius;\r\n\r\n\t\t\t\tlet angle = index / dataItem.children.length * 360;\r\n\r\n\t\t\t\tchild.node.x = node.pixelX + radius * $math.cos(angle);\r\n\t\t\t\tchild.node.y = node.pixelY + radius * $math.sin(angle);\r\n\r\n\t\t\t\tchild.node.circle.radius = 0;\r\n\r\n\t\t\t\tlet color: Color | LinearGradient | RadialGradient | Pattern;\r\n\r\n\t\t\t\tlet diColor = child.properties.color;\r\n\t\t\t\tif ($type.hasValue(diColor)) {\r\n\t\t\t\t\tcolor = diColor;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.dataItems.length == 1 && dataItem.level == 0) {\r\n\t\t\t\t\t\tcolor = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcolor = dataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tchild.color = color;\r\n\t\t\t\tchild.node.fill = color;\r\n\t\t\t\tchild.node.stroke = color;\r\n\t\t\t\tchild.parentLink.stroke = color;\r\n\r\n\t\t\t\tchild.node.fill = child.node.fill;\r\n\t\t\t\tchild.node.stroke = child.node.stroke;\r\n\r\n\t\t\t\tthis.initNode(child);\r\n\r\n\t\t\t\tindex++;\r\n\t\t\t})\r\n\t\t}\r\n\t\tnode.isActive = true;\r\n\t\tnode.show(0);\r\n\t\tthis.updateNodeList();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tprotected processLinkWith(dataItem: ForceDirectedSeriesDataItem) {\r\n\r\n\t\tif (dataItem.linkWith) {\r\n\t\t\t$array.each(dataItem.linkWith, (id, index) => {\r\n\t\t\t\tlet dataItemToConnect = this.getDataItemById(this.dataItems, id);\r\n\r\n\t\t\t\tif (dataItemToConnect) {\r\n\t\t\t\t\tdataItem.node.linkWith(dataItemToConnect.node, this.linkWithStrength);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (dataItem.children) {\r\n\t\t\tdataItem.children.each((child) => {\r\n\t\t\t\tthis.processLinkWith(child);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[ForceDirectedSeriesDataItem]] related to node by specific id.\r\n\t *\r\n\t * @param   dataItems  List of data items to search in\r\n\t * @param   id         Id to search for\r\n\t * @return             Data item\r\n\t */\r\n\tpublic getDataItemById(dataItems: OrderedListTemplate<ForceDirectedSeriesDataItem>, id: string): ForceDirectedSeriesDataItem {\r\n\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.id == id) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\tif (dataItem.children) {\r\n\t\t\t\tlet di = this.getDataItemById(dataItem.children, id);\r\n\t\t\t\tif (di) {\r\n\t\t\t\t\treturn di;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ForceDirectedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of nodes in series.\r\n\t *\r\n\t * @return  Node list\r\n\t */\r\n\tpublic get nodes(): ListTemplate<this[\"_node\"]> {\r\n\t\tif (!this._nodes) {\r\n\t\t\tlet node = this.createNode();\r\n\r\n\t\t\tnode.applyOnClones = true;\r\n\t\t\tthis._disposers.push(node);\r\n\r\n\t\t\tthis._nodes = new ListTemplate(node);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of links between nodes.\r\n\t *\r\n\t * @return  Link list\r\n\t */\r\n\tpublic get links(): ListTemplate<this[\"_link\"]> {\r\n\t\tif (!this._links) {\r\n\t\t\tlet link = this.createLink();\r\n\t\t\tlink.applyOnClones = true;\r\n\t\t\tthis._disposers.push(link);\r\n\r\n\t\t\tthis._links = new ListTemplate(link);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new node.\r\n\t */\r\n\tprotected createNode(): this[\"_node\"] {\r\n\t\treturn new ForceDirectedNode();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new link.\r\n\t */\r\n\tprotected createLink(): this[\"_link\"] {\r\n\t\treturn new ForceDirectedLink();\r\n\t}\r\n\r\n\t/**\r\n\t * Smallest possible radius in pixels of the node circle.\r\n\t *\r\n\t * If set in percent, it radius will be calculated from average width and\r\n\t * height of series.\r\n\t *\r\n\t * @default Percent(1)\r\n\t * @param  value  Minimum radius (px or percent)\r\n\t */\r\n\tpublic set minRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"minRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Minimum radius (px or percent)\r\n\t */\r\n\tpublic get minRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"minRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Biggest possible radius in pixels of the node circle.\r\n\t *\r\n\t * If set in percent, it radius will be calculated from average width and\r\n\t * height of series.\r\n\t *\r\n\t * @default Percent(8)\r\n\t * @param  value  Maximum radius (px or Percent)\r\n\t */\r\n\tpublic set maxRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"maxRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum radius (px or Percent)\r\n\t */\r\n\tpublic get maxRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"maxRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for nodes.\r\n\t *\r\n\t * iIt works like this:\r\n\t *\r\n\t * The first level with more than one node, assigns different colors to all\r\n\t * nodes in this list. Their child nodes inherit the color.\r\n\t *\r\n\t * For example, if the top level has one node with three children, the top\r\n\t * node will get first color, the first child will get second color, etc.\r\n\t *\r\n\t * If there are two top nodes, the first top node gets first color, the\r\n\t * second top node gets the second color. Their subsequent children inherit\r\n\t * colors.\r\n\t *\r\n\t * @param value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of levels to be displayed initially.\r\n\t *\r\n\t * @param  value  Number of levels\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of levels\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative strength each node pushes (or attracts) other nodes (it is\r\n\t * multiplied by `node.circle.radius` for big nodes to push stronger).\r\n\t *\r\n\t * Positive value will make nodes attract each other, while negative will\r\n\t * push away each other. The bigger the negative number is, the more\r\n\t * scattered nodes will be.\r\n\t *\r\n\t * Available value range: `-XX` to `XX`.\r\n\t *\r\n\t * @default -15\r\n\t * @param  value  Body push/attrack strength\r\n\t */\r\n\tpublic set manyBodyStrength(value: number) {\r\n\t\tif (this.setPropertyValue(\"manyBodyStrength\", value)) {\r\n\t\t\tthis.restartSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Body push/attrack strength\r\n\t */\r\n\tpublic get manyBodyStrength(): number {\r\n\t\treturn this.getPropertyValue(\"manyBodyStrength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative strength each child node is pushes (or attracted) to the center\r\n\t * of the chart.\r\n\t *\r\n\t * Positive value will make nodes to be attracted to center, while negative\r\n\t * will push them away.\r\n\t *\r\n\t * Available value range: `-50` to `50`.\r\n\t *\r\n\t * @default 0.8\r\n\t * @param  value  Stregth of attraction to center\r\n\t */\r\n\tpublic set centerStrength(value: number) {\r\n\t\tif (this.setPropertyValue(\"centerStrength\", value)) {\r\n\t\t\tthis.restartSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Stregth of attraction to center\r\n\t */\r\n\tpublic get centerStrength(): number {\r\n\t\treturn this.getPropertyValue(\"centerStrength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative attraction strength between the nodes connected with `linkWith`.\r\n\t *\r\n\t * @since 4.4.8\r\n\t * @param  value  Strength\r\n\t * @default undefined\r\n\t */\r\n\tpublic set linkWithStrength(value: number) {\r\n\t\tif (this.setPropertyValue(\"linkWithStrength\", value)) {\r\n\t\t\tthis.restartSimulation();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Strength\r\n\t */\r\n\tpublic get linkWithStrength(): number {\r\n\t\treturn this.getPropertyValue(\"linkWithStrength\");\r\n\t}\r\n\r\n\t/**\r\n\t * The bigger the number the more slowly the nodes will move. Think of it as\r\n\t * friction.\r\n\t *\r\n\t * @since 4.9.2\r\n\t * @param  value  Velocity decay\r\n\t * @default 0.4\r\n\t */\r\n\tpublic set velocityDecay(value: number) {\r\n\t\tif (this.setPropertyValue(\"velocityDecay\", value)) {\r\n\t\t\tthis.d3forceSimulation.velocityDecay(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Velocity decay\r\n\t */\r\n\tpublic get velocityDecay(): number {\r\n\t\treturn this.getPropertyValue(\"velocityDecay\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if user can drag fixed nodes.\r\n\t *\r\n\t * @since 4.9.0\r\n\t * @default false\r\n\t * @param  value  Allow drag fixed nodes?\r\n\t */\r\n\tpublic set dragFixedNodes(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"dragFixedNodes\", value)) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tthis.handleFixed(dataItem);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Allow drag fixed nodes?\r\n\t */\r\n\tpublic get dragFixedNodes(): boolean {\r\n\t\treturn this.getPropertyValue(\"dragFixedNodes\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker    Container\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\tmarker.children.each((child) => {\r\n\t\t\tlet node = dataItem.node;\r\n\r\n\t\t\tif (child instanceof RoundedRectangle) {\r\n\t\t\t\tchild.cornerRadius(40, 40, 40, 40);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tchild.defaultState.properties.fill = node.fill;\r\n\t\t\tchild.defaultState.properties.stroke = node.stroke;\r\n\t\t\tchild.defaultState.properties.fillOpacity = node.fillOpacity;\r\n\t\t\tchild.defaultState.properties.strokeOpacity = node.strokeOpacity;\r\n\r\n\t\t\tchild.fill = node.fill;\r\n\t\t\tchild.stroke = node.stroke;\r\n\t\t\tchild.fillOpacity = node.fillOpacity;\r\n\t\t\tchild.strokeOpacity = node.strokeOpacity;\r\n\r\n\t\t\tif (child.fill == undefined) {\r\n\t\t\t\tchild.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\t\tlegendDataItem.color = node.fill;\r\n\t\t\tlegendDataItem.colorOrig = node.fill;\r\n\r\n\t\t\tnode.events.on(\"propertychanged\", (ev) => {\r\n\t\t\t\tif (ev.property == \"fill\") {\r\n\r\n\t\t\t\t\tchild.__disabled = false;\r\n\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.fill = node.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.fill = node.fill;\r\n\t\t\t\t\tlegendDataItem.color = node.fill;\r\n\t\t\t\t\tlegendDataItem.colorOrig = node.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"stroke\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.stroke = node.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.stroke = node.stroke;\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false)\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Renders series hidden until Xth tick.\r\n\t *\r\n\t * @default 10\r\n\t * @since 4.10.17\r\n\t * @param value Number of ticks to delay rendering\r\n\t */\r\n\tpublic set showOnTick(value: number) {\r\n\t\tthis.setPropertyValue(\"showOnTick\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of ticks to delay rendering\r\n\t */\r\n\tpublic get showOnTick(): number {\r\n\t\treturn this.getPropertyValue(\"showOnTick\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedSeries\"] = ForceDirectedSeries;\r\nregistry.registeredClasses[\"ForceDirectedSeriesDataItem\"] = ForceDirectedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/plugins/forceDirected/ForceDirectedSeries.ts","/**\r\n * ForceDirectedTree chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"../../charts/types/SerialChart\";\r\nimport { ForceDirectedSeries, ForceDirectedSeriesDataItem } from \"./ForceDirectedSeries\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n * @see {@link DataItem}\r\n */\r\nexport class ForceDirectedTreeDataItem extends SerialChartDataItem { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Indicates whether chart can be zoomed/panned (via mouse, touch, or API).\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default false\r\n\t */\r\n\tzoomable?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default none\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default 2\r\n\t */\r\n\tzoomStep?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n */\r\nexport interface IForceDirectedTreeEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ForceDirectedTree]].\r\n *\r\n * @since 4.3.8\r\n * @see {@link Adapter}\r\n */\r\nexport interface IForceDirectedTreeAdapters extends ISerialChartAdapters, IForceDirectedTreeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A main class for [[ForceDirectedTree]] chart type.\r\n *\r\n * @see {@link IForceDirectedTreeEvents} for a list of available Events\r\n * @see {@link IForceDirectedTreeAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/force-directed/} For more information\r\n * @since 4.3.8\r\n * @important\r\n */\r\nexport class ForceDirectedTree extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ForceDirectedTreeDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IForceDirectedTreeDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IForceDirectedTreeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IForceDirectedTreeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IForceDirectedTreeEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: ForceDirectedSeries;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _backgroundZoomoutDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The chart will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The chart will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t */\r\n\tpublic maxZoomLevel: number = 16;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: ZoomOutButton;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ForceDirectedTree\";\r\n\r\n\t\tthis.seriesContainer.isMeasured = true;\r\n\t\tthis.seriesContainer.layout = \"absolute\";\r\n\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\t\tthis.zoomStep = 2;\r\n\r\n\t\tthis.seriesContainer.background.fillOpacity = 0;\r\n\t\tthis.seriesContainer.background.fill = color(\"#ffffff\")\r\n\r\n\t\tlet zoomOutButton = this.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.x = percent(100);\r\n\t\tzoomOutButton.horizontalCenter = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\t\tzoomOutButton.isMeasured = false;\r\n\r\n\t\tzoomOutButton.adapter.add(\"dx\", (dx, target) => {\r\n\t\t\treturn - zoomOutButton.marginRight;\r\n\t\t})\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis.addDisposer(this.seriesContainer.events.on(\"sizechanged\", () => {\r\n\r\n\t\t\tif (this.seriesContainer.scale != 1) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", (event: IInteractionEvents[\"down\"]) => {\r\n\t\t\tif (this.zoomable) {\r\n\t\t\t\tlet svgPoint = $utils.documentPointToSvg(event.pointer.point, this.htmlContainer);\r\n\t\t\t\tif (svgPoint.x > 0 && svgPoint.y > 0 && svgPoint.x < this.svgContainer.width && svgPoint.y < this.svgContainer.height) {\r\n\t\t\t\t\tthis.seriesContainer.dragStart(event.pointer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", (event: IInteractionEvents[\"up\"]) => {\r\n\t\t\tif (this.zoomable) {\r\n\t\t\t\tthis.seriesContainer.dragStop(event.pointer, true);\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new ForceDirectedSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ForceDirectedTreeDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\r\n\t\t\t\t\tlet dataItems = series.dataItems;\r\n\t\t\t\t\tif (dataItems.length == 1) {\r\n\t\t\t\t\t\tlet children = series.dataItems.getIndex(0).children;\r\n\t\t\t\t\t\tif (children && children.length > 0) {\r\n\t\t\t\t\t\t\tdataItems = children;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<ForceDirectedSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Force directed tree\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tif ($type.hasValue(series.dataFields.children)) {\r\n\t\t\t\t\t\tdelete info.dataFields[series.dataFields.children];\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet point: IPoint = $utils.documentPointToSprite(event.point, this.seriesContainer);\r\n\r\n\t\tlet zoomLevel = this.seriesContainer.scale;\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tzoomLevel *= this.zoomStep;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tzoomLevel /= this.zoomStep;\r\n\t\t}\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tthis.zoomToPoint(point, zoomLevel)\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the chart to particular point.\r\n\t *\r\n\t * @from 4.10.0\r\n\t * @param  point      A point to zoom to\r\n\t * @param  zoomLevel  Zoom level\r\n\t * @param  center     Should the chart center on the target point?\r\n\t */\r\n\tpublic zoomToPoint(point: IPoint, zoomLevel: number, center?: boolean): void {\r\n\r\n\t\tlet container = this.seriesContainer;\r\n\r\n\t\tlet svgPoint: IPoint\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = { x: this.maxWidth / 2, y: this.maxHeight / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsvgPoint = $utils.spritePointToSvg(point, container)\r\n\t\t}\r\n\r\n\t\tlet x = svgPoint.x - point.x * zoomLevel;\r\n\t\tlet y = svgPoint.y - point.y * zoomLevel;\r\n\r\n\t\tcontainer.animate([{ property: \"scale\", to: zoomLevel }, { property: \"x\", to: x }, { property: \"y\", to: y }], this.zoomDuration, this.zoomEasing);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the chart to particular data item (node).\r\n\t *\r\n\t * @from 4.10.0\r\n\t * @param  dataItem   A data item to zoom to\r\n\t * @param  zoomLevel  Zoom level\r\n\t * @param  center     Should the chart center on the target point?\r\n\t */\r\n\tpublic zoomToDataItem(dataItem: ForceDirectedSeriesDataItem, zoomLevel?: number, center?: boolean): void {\r\n\t\tlet x = dataItem.node.pixelX;\r\n\t\tlet y = dataItem.node.pixelY;\r\n\r\n\t\tif (!$type.isNumber(zoomLevel)) {\r\n\t\t\tzoomLevel = this.seriesContainer.scale * this.zoomStep;\r\n\t\t}\r\n\r\n\t\tthis.zoomToPoint({ x: x, y: y }, zoomLevel, center);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the chart to initial full view.\r\n\t *\r\n\t * @from 4.10.0\r\n\t */\r\n\tpublic zoomOut(): void {\r\n\t\tlet container = this.seriesContainer;\r\n\t\tthis.zoomToPoint({ x: container.pixelWidth / 2, y: container.pixelHeight / 2 }, 1, true);\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.10.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/force-directed/#Zooming} for more information about zooming ForceDirectedTree\r\n\t * @param value  Zoomable\r\n\t */\r\n\tpublic set zoomable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"zoomable\", value)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.seriesContainer.resizable = true;\r\n\t\t\t\tthis.seriesContainer.draggable = true;\r\n\t\t\t\tthis.seriesContainer.dragWhileResize = true;\r\n\t\t\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t\t\tthis._backgroundZoomoutDisposer = this.seriesContainer.background.events.on(\"hit\", () => {\r\n\t\t\t\t\tthis.zoomOut();\r\n\t\t\t\t}, this, false);\r\n\t\t\t\tthis._disposers.push(this._backgroundZoomoutDisposer);\r\n\r\n\t\t\t\tthis._disposers.push(this.seriesContainer.events.on(\"sizechanged\", () => {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tseries.nodes.each((node) => {\r\n\t\t\t\t\t\t\tnode.updateLabelSize();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.seriesContainer.resizable = false;\r\n\t\t\t\tthis.seriesContainer.draggable = false;\r\n\t\t\t\tthis.seriesContainer.dragWhileResize = false;\r\n\t\t\t\tthis.mouseWheelBehavior = \"none\";\r\n\t\t\t\tif (this._backgroundZoomoutDisposer) {\r\n\t\t\t\t\tthis._backgroundZoomoutDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoomable\r\n\t */\r\n\tpublic get zoomable(): boolean {\r\n\t\treturn this.getPropertyValue(\"zoomable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param Mouse wheel behavior\r\n\t * @since 4.10.0\r\n\t * @default none\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @default 2\r\n\t * @param value  Zoom factor\r\n\t */\r\n\tpublic set zoomStep(value: number) {\r\n\t\tthis.setPropertyValue(\"zoomStep\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomStep(): number {\r\n\t\treturn this.getPropertyValue(\"zoomStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: ZoomOutButton) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomOut();\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): ZoomOutButton {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ForceDirectedTree\"] = ForceDirectedTree;\r\nregistry.registeredClasses[\"ForceDirectedTreeDataItem\"] = ForceDirectedTreeDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/plugins/forceDirected/ForceDirectedTree.ts","import * as m from \"../../es2015/plugins/forceDirected\";\nwindow.am4plugins_forceDirected = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./plugins/forceDirected.js\n// module id = null\n// module chunks = "],"sourceRoot":""}